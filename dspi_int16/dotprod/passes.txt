clang: warning: no multilib found matching flags: --target=riscv32-esp-unknown-elf -mabi=ilp32f -march=rv32imafc_zicsr_zifencei_xesppie_zcmp [-Wmissing-multilib]
clang: note: available multilibs are:
--target=riscv32-esp-unknown-elf -march=rv32i_zicsr_zifencei -mabi=ilp32
--target=riscv32-esp-unknown-elf -march=rv32i_zicsr_zifencei -mabi=ilp32 -fno-rtti
--target=riscv32-esp-unknown-elf -march=rv32imc_zicsr_zifencei -mabi=ilp32
--target=riscv32-esp-unknown-elf -march=rv32imc_zicsr_zifencei -mabi=ilp32 -fno-rtti
--target=riscv32-esp-unknown-elf -march=rv32imac_zicsr_zifencei -mabi=ilp32
--target=riscv32-esp-unknown-elf -march=rv32imac_zicsr_zifencei -mabi=ilp32 -fno-rtti
--target=riscv32-esp-unknown-elf -march=rv32imafc_zicsr_zifencei -mabi=ilp32f
--target=riscv32-esp-unknown-elf -march=rv32imafc_zicsr_zifencei -mabi=ilp32f -fno-rtti
; *** IR Dump Before Annotation2MetadataPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump After Annotation2MetadataPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump Before ForceFunctionAttrsPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump After ForceFunctionAttrsPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump Before AssignmentTrackingPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump After AssignmentTrackingPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump Before InferFunctionAttrsPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump After InferFunctionAttrsPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump Before CoroEarlyPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump After CoroEarlyPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!11, !9, i64 4}
!11 = !{!"image2d_s", !5, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!12 = !{!11, !9, i64 12}
!13 = !{!11, !9, i64 8}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"long long", !6, i64 0}
!18 = !{!19, !19, i64 0}
!19 = !{!"short", !6, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = distinct !{!22, !21}
!23 = distinct !{!23, !21}
; *** IR Dump Before LowerExpectIntrinsicPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}
; *** IR Dump After LowerExpectIntrinsicPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc159, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  br label %for.end161

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %for.body
  %34 = load i32, ptr %x, align 4, !tbaa !8
  %35 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %35, 7
  %cmp26 = icmp slt i32 %34, %sub
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %36 = load ptr, ptr %i_data, align 4, !tbaa !4
  %37 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %37, i32 0, i32 1
  %38 = load i32, ptr %step_x28, align 4, !tbaa !10
  %39 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %38, %39
  %arrayidx = getelementptr inbounds i16, ptr %36, i32 %mul29
  %40 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %40 to i32
  %41 = load ptr, ptr %f_data, align 4, !tbaa !4
  %42 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %42, i32 0, i32 1
  %43 = load i32, ptr %step_x30, align 4, !tbaa !10
  %44 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %43, %44
  %arrayidx32 = getelementptr inbounds i16, ptr %41, i32 %mul31
  %45 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %45 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %46 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %46, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %47 = load ptr, ptr %i_data, align 4, !tbaa !4
  %48 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x36, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %50, 1
  %mul38 = mul nsw i32 %49, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %47, i32 %mul38
  %51 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %51 to i32
  %52 = load ptr, ptr %f_data, align 4, !tbaa !4
  %53 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %53, i32 0, i32 1
  %54 = load i32, ptr %step_x41, align 4, !tbaa !10
  %55 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %55, 1
  %mul43 = mul nsw i32 %54, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %52, i32 %mul43
  %56 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %56 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %57 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %57, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %58 = load ptr, ptr %i_data, align 4, !tbaa !4
  %59 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x49, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %61, 2
  %mul51 = mul nsw i32 %60, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %58, i32 %mul51
  %62 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %62 to i32
  %63 = load ptr, ptr %f_data, align 4, !tbaa !4
  %64 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %64, i32 0, i32 1
  %65 = load i32, ptr %step_x54, align 4, !tbaa !10
  %66 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %66, 2
  %mul56 = mul nsw i32 %65, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %63, i32 %mul56
  %67 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %67 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %68 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %68, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %69 = load ptr, ptr %i_data, align 4, !tbaa !4
  %70 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x62, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %72, 3
  %mul64 = mul nsw i32 %71, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %69, i32 %mul64
  %73 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %73 to i32
  %74 = load ptr, ptr %f_data, align 4, !tbaa !4
  %75 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %75, i32 0, i32 1
  %76 = load i32, ptr %step_x67, align 4, !tbaa !10
  %77 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %77, 3
  %mul69 = mul nsw i32 %76, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %74, i32 %mul69
  %78 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %78 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %79 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %79, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %80 = load ptr, ptr %i_data, align 4, !tbaa !4
  %81 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x75, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %83, 4
  %mul77 = mul nsw i32 %82, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %80, i32 %mul77
  %84 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %84 to i32
  %85 = load ptr, ptr %f_data, align 4, !tbaa !4
  %86 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %86, i32 0, i32 1
  %87 = load i32, ptr %step_x80, align 4, !tbaa !10
  %88 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %88, 4
  %mul82 = mul nsw i32 %87, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %85, i32 %mul82
  %89 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %89 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %90 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %90, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %91 = load ptr, ptr %i_data, align 4, !tbaa !4
  %92 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x88, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %94, 5
  %mul90 = mul nsw i32 %93, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %91, i32 %mul90
  %95 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %95 to i32
  %96 = load ptr, ptr %f_data, align 4, !tbaa !4
  %97 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %97, i32 0, i32 1
  %98 = load i32, ptr %step_x93, align 4, !tbaa !10
  %99 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %99, 5
  %mul95 = mul nsw i32 %98, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %96, i32 %mul95
  %100 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %100 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %101 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %101, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %102 = load ptr, ptr %i_data, align 4, !tbaa !4
  %103 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x101, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %105, 6
  %mul103 = mul nsw i32 %104, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %102, i32 %mul103
  %106 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %106 to i32
  %107 = load ptr, ptr %f_data, align 4, !tbaa !4
  %108 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %108, i32 0, i32 1
  %109 = load i32, ptr %step_x106, align 4, !tbaa !10
  %110 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %110, 6
  %mul108 = mul nsw i32 %109, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %107, i32 %mul108
  %111 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %111 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %112 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %112, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %113 = load ptr, ptr %i_data, align 4, !tbaa !4
  %114 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x114, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %116, 7
  %mul116 = mul nsw i32 %115, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %113, i32 %mul116
  %117 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %117 to i32
  %118 = load ptr, ptr %f_data, align 4, !tbaa !4
  %119 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %119, i32 0, i32 1
  %120 = load i32, ptr %step_x119, align 4, !tbaa !10
  %121 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %121, 7
  %mul121 = mul nsw i32 %120, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %118, i32 %mul121
  %122 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %122 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %123 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %123, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %124 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %124, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.end:                                          ; preds = %for.cond25
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc143, %for.end
  %125 = load i32, ptr %x, align 4, !tbaa !8
  %126 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %125, %126
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %127 = load ptr, ptr %i_data, align 4, !tbaa !4
  %128 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %128, i32 0, i32 1
  %129 = load i32, ptr %step_x132, align 4, !tbaa !10
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %129, %130
  %arrayidx134 = getelementptr inbounds i16, ptr %127, i32 %mul133
  %131 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %131 to i32
  %132 = load ptr, ptr %f_data, align 4, !tbaa !4
  %133 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %133, i32 0, i32 1
  %134 = load i32, ptr %step_x136, align 4, !tbaa !10
  %135 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %134, %135
  %arrayidx138 = getelementptr inbounds i16, ptr %132, i32 %mul137
  %136 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %136 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %137 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %137, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  br label %for.inc143

for.inc143:                                       ; preds = %for.body131
  %138 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %138, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %139 = load i64, ptr %acc0, align 8, !tbaa !16
  %140 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %139, %140
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %141 = load i64, ptr %acc2, align 8, !tbaa !16
  %142 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %141, %142
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %143 = load i64, ptr %acc4, align 8, !tbaa !16
  %144 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %143, %144
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %145 = load i64, ptr %acc6, align 8, !tbaa !16
  %146 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %145, %146
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %147 = load i32, ptr %temp1, align 4, !tbaa !8
  %148 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %147, %148
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %149 = load i32, ptr %temp3, align 4, !tbaa !8
  %150 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %149, %150
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %151 = load i32, ptr %temp5, align 4, !tbaa !8
  %152 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %151, %152
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %153 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %153 to i64
  %154 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %154, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %155 = load i32, ptr %i_step, align 4, !tbaa !8
  %156 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %156, i32 %155
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %157 = load i32, ptr %f_step, align 4, !tbaa !8
  %158 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %158, i32 %157
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  br label %for.inc159

for.inc159:                                       ; preds = %for.end144
  %159 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %159, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

for.end161:                                       ; preds = %for.cond.cleanup
  %160 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %160, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %161 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %161, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %162 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %163 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %162 to i64
  %shr = ashr i64 %163, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %164 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %164 to i16
  %165 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %165, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

return:                                           ; preds = %for.end161, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  %34 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %34, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %35 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %35, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %36 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %37 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %36 to i64
  %shr = ashr i64 %37, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %38 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %38 to i16
  %39 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %39, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %40 = load i32, ptr %x, align 4, !tbaa !8
  %41 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %41, 7
  %cmp26 = icmp slt i32 %40, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %42 = load ptr, ptr %i_data, align 4, !tbaa !4
  %43 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %43, i32 0, i32 1
  %44 = load i32, ptr %step_x28, align 4, !tbaa !10
  %45 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %44, %45
  %arrayidx = getelementptr inbounds i16, ptr %42, i32 %mul29
  %46 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %46 to i32
  %47 = load ptr, ptr %f_data, align 4, !tbaa !4
  %48 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x30, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %49, %50
  %arrayidx32 = getelementptr inbounds i16, ptr %47, i32 %mul31
  %51 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %51 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %52 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %52, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %53 = load ptr, ptr %i_data, align 4, !tbaa !4
  %54 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %54, i32 0, i32 1
  %55 = load i32, ptr %step_x36, align 4, !tbaa !10
  %56 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %56, 1
  %mul38 = mul nsw i32 %55, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %53, i32 %mul38
  %57 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %57 to i32
  %58 = load ptr, ptr %f_data, align 4, !tbaa !4
  %59 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x41, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %61, 1
  %mul43 = mul nsw i32 %60, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %58, i32 %mul43
  %62 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %62 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %63 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %63, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %64 = load ptr, ptr %i_data, align 4, !tbaa !4
  %65 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %65, i32 0, i32 1
  %66 = load i32, ptr %step_x49, align 4, !tbaa !10
  %67 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %67, 2
  %mul51 = mul nsw i32 %66, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %64, i32 %mul51
  %68 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %68 to i32
  %69 = load ptr, ptr %f_data, align 4, !tbaa !4
  %70 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x54, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %72, 2
  %mul56 = mul nsw i32 %71, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %69, i32 %mul56
  %73 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %73 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %74 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %74, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %75 = load ptr, ptr %i_data, align 4, !tbaa !4
  %76 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %76, i32 0, i32 1
  %77 = load i32, ptr %step_x62, align 4, !tbaa !10
  %78 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %78, 3
  %mul64 = mul nsw i32 %77, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %75, i32 %mul64
  %79 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %79 to i32
  %80 = load ptr, ptr %f_data, align 4, !tbaa !4
  %81 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x67, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %83, 3
  %mul69 = mul nsw i32 %82, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %80, i32 %mul69
  %84 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %84 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %85 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %85, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %86 = load ptr, ptr %i_data, align 4, !tbaa !4
  %87 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %87, i32 0, i32 1
  %88 = load i32, ptr %step_x75, align 4, !tbaa !10
  %89 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %89, 4
  %mul77 = mul nsw i32 %88, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %86, i32 %mul77
  %90 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %90 to i32
  %91 = load ptr, ptr %f_data, align 4, !tbaa !4
  %92 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x80, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %94, 4
  %mul82 = mul nsw i32 %93, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %91, i32 %mul82
  %95 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %95 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %96 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %96, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %97 = load ptr, ptr %i_data, align 4, !tbaa !4
  %98 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %98, i32 0, i32 1
  %99 = load i32, ptr %step_x88, align 4, !tbaa !10
  %100 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %100, 5
  %mul90 = mul nsw i32 %99, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %97, i32 %mul90
  %101 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %101 to i32
  %102 = load ptr, ptr %f_data, align 4, !tbaa !4
  %103 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x93, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %105, 5
  %mul95 = mul nsw i32 %104, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %102, i32 %mul95
  %106 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %106 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %107 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %107, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %108 = load ptr, ptr %i_data, align 4, !tbaa !4
  %109 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %109, i32 0, i32 1
  %110 = load i32, ptr %step_x101, align 4, !tbaa !10
  %111 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %111, 6
  %mul103 = mul nsw i32 %110, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %108, i32 %mul103
  %112 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %112 to i32
  %113 = load ptr, ptr %f_data, align 4, !tbaa !4
  %114 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x106, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %116, 6
  %mul108 = mul nsw i32 %115, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %113, i32 %mul108
  %117 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %117 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %118 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %118, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %119 = load ptr, ptr %i_data, align 4, !tbaa !4
  %120 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %120, i32 0, i32 1
  %121 = load i32, ptr %step_x114, align 4, !tbaa !10
  %122 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %122, 7
  %mul116 = mul nsw i32 %121, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %119, i32 %mul116
  %123 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %123 to i32
  %124 = load ptr, ptr %f_data, align 4, !tbaa !4
  %125 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %125, i32 0, i32 1
  %126 = load i32, ptr %step_x119, align 4, !tbaa !10
  %127 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %127, 7
  %mul121 = mul nsw i32 %126, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %124, i32 %mul121
  %128 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %128 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %129 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %129, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %130, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %131 = load i32, ptr %x, align 4, !tbaa !8
  %132 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %131, %132
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %133 = load ptr, ptr %i_data, align 4, !tbaa !4
  %134 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %134, i32 0, i32 1
  %135 = load i32, ptr %step_x132, align 4, !tbaa !10
  %136 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %135, %136
  %arrayidx134 = getelementptr inbounds i16, ptr %133, i32 %mul133
  %137 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %137 to i32
  %138 = load ptr, ptr %f_data, align 4, !tbaa !4
  %139 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %139, i32 0, i32 1
  %140 = load i32, ptr %step_x136, align 4, !tbaa !10
  %141 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %140, %141
  %arrayidx138 = getelementptr inbounds i16, ptr %138, i32 %mul137
  %142 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %142 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %143 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %143, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  %144 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %144, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %145 = load i64, ptr %acc0, align 8, !tbaa !16
  %146 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %145, %146
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %147 = load i64, ptr %acc2, align 8, !tbaa !16
  %148 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %147, %148
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %149 = load i64, ptr %acc4, align 8, !tbaa !16
  %150 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %149, %150
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %151 = load i64, ptr %acc6, align 8, !tbaa !16
  %152 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %151, %152
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %153 = load i32, ptr %temp1, align 4, !tbaa !8
  %154 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %153, %154
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %155 = load i32, ptr %temp3, align 4, !tbaa !8
  %156 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %155, %156
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %157 = load i32, ptr %temp5, align 4, !tbaa !8
  %158 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %157, %158
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %159 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %159 to i64
  %160 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %160, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %161 = load i32, ptr %i_step, align 4, !tbaa !8
  %162 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %162, i32 %161
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %163 = load i32, ptr %f_step, align 4, !tbaa !8
  %164 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %164, i32 %163
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  %165 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %165, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}
; *** IR Dump Before SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %retval = alloca i32, align 4
  %in_image.addr = alloca ptr, align 4
  %filter.addr = alloca ptr, align 4
  %out_value.addr = alloca ptr, align 4
  %count_x.addr = alloca i32, align 4
  %count_y.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %i_data = alloca ptr, align 4
  %f_data = alloca ptr, align 4
  %i_step = alloca i32, align 4
  %f_step = alloca i32, align 4
  %acc = alloca i64, align 8
  %y = alloca i32, align 4
  %acc0 = alloca i64, align 8
  %acc1 = alloca i64, align 8
  %acc2 = alloca i64, align 8
  %acc3 = alloca i64, align 8
  %acc4 = alloca i64, align 8
  %acc5 = alloca i64, align 8
  %acc6 = alloca i64, align 8
  %acc7 = alloca i64, align 8
  %x = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %temp3 = alloca i32, align 4
  %temp4 = alloca i32, align 4
  %temp5 = alloca i32, align 4
  %temp6 = alloca i32, align 4
  %temp7 = alloca i32, align 4
  store ptr %in_image, ptr %in_image.addr, align 4, !tbaa !4
  store ptr %filter, ptr %filter.addr, align 4, !tbaa !4
  store ptr %out_value, ptr %out_value.addr, align 4, !tbaa !4
  store i32 %count_x, ptr %count_x.addr, align 4, !tbaa !8
  store i32 %count_y, ptr %count_y.addr, align 4, !tbaa !8
  store i32 %shift, ptr %shift.addr, align 4, !tbaa !8
  %0 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %step_x, align 4, !tbaa !10
  %2 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul = mul nsw i32 %1, %2
  %3 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %stride_x, align 4, !tbaa !12
  %cmp = icmp sgt i32 %mul, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 458755, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %5, i32 0, i32 2
  %6 = load i32, ptr %step_y, align 4, !tbaa !13
  %7 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul1 = mul nsw i32 %6, %7
  %8 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %stride_y, align 4, !tbaa !14
  %cmp2 = icmp sgt i32 %mul1, %9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 458755, ptr %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %step_x5, align 4, !tbaa !10
  %12 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %mul6 = mul nsw i32 %11, %12
  %13 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %stride_x7, align 4, !tbaa !12
  %cmp8 = icmp sgt i32 %mul6, %14
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  store i32 458755, ptr %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %15 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %step_y11, align 4, !tbaa !13
  %17 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %mul12 = mul nsw i32 %16, %17
  %18 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %stride_y13, align 4, !tbaa !14
  %cmp14 = icmp sgt i32 %mul12, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  store i32 458755, ptr %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end10
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_data) #2
  %20 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %data = getelementptr inbounds %struct.image2d_s, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %data, align 4, !tbaa !15
  store ptr %21, ptr %i_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_data) #2
  %22 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %data17, align 4, !tbaa !15
  store ptr %23, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.start.p0(i64 4, ptr %i_step) #2
  %24 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %24, i32 0, i32 3
  %25 = load i32, ptr %stride_x18, align 4, !tbaa !12
  %26 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %26, i32 0, i32 2
  %27 = load i32, ptr %step_y19, align 4, !tbaa !13
  %mul20 = mul nsw i32 %25, %27
  store i32 %mul20, ptr %i_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %f_step) #2
  %28 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %28, i32 0, i32 3
  %29 = load i32, ptr %stride_x21, align 4, !tbaa !12
  %30 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %30, i32 0, i32 2
  %31 = load i32, ptr %step_y22, align 4, !tbaa !13
  %mul23 = mul nsw i32 %29, %31
  store i32 %mul23, ptr %f_step, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc) #2
  store i64 0, ptr %acc, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %y) #2
  store i32 0, ptr %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %32 = load i32, ptr %y, align 4, !tbaa !8
  %33 = load i32, ptr %count_y.addr, align 4, !tbaa !8
  %cmp24 = icmp slt i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  call void @llvm.lifetime.end.p0(i64 4, ptr %y) #2
  %34 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %sub162 = sub nsw i32 %34, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %35 = load i64, ptr %acc, align 8, !tbaa !16
  %add164 = add nsw i64 %35, %conv163
  store i64 %add164, ptr %acc, align 8, !tbaa !16
  %36 = load i32, ptr %shift.addr, align 4, !tbaa !8
  %37 = load i64, ptr %acc, align 8, !tbaa !16
  %sh_prom = zext i32 %36 to i64
  %shr = ashr i64 %37, %sh_prom
  store i64 %shr, ptr %acc, align 8, !tbaa !16
  %38 = load i64, ptr %acc, align 8, !tbaa !16
  %conv165 = trunc i64 %38 to i16
  %39 = load ptr, ptr %out_value.addr, align 4, !tbaa !4
  store i16 %conv165, ptr %39, align 2, !tbaa !18
  store i32 0, ptr %retval, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_step) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %f_data) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %i_data) #2
  br label %return

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc0) #2
  store i64 0, ptr %acc0, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc1) #2
  store i64 0, ptr %acc1, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc2) #2
  store i64 0, ptr %acc2, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc3) #2
  store i64 0, ptr %acc3, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc4) #2
  store i64 0, ptr %acc4, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc5) #2
  store i64 0, ptr %acc5, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc6) #2
  store i64 0, ptr %acc6, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr %acc7) #2
  store i64 0, ptr %acc7, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr %x) #2
  store i32 0, ptr %x, align 4, !tbaa !8
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %40 = load i32, ptr %x, align 4, !tbaa !8
  %41 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %41, 7
  %cmp26 = icmp slt i32 %40, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %42 = load ptr, ptr %i_data, align 4, !tbaa !4
  %43 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %43, i32 0, i32 1
  %44 = load i32, ptr %step_x28, align 4, !tbaa !10
  %45 = load i32, ptr %x, align 4, !tbaa !8
  %mul29 = mul nsw i32 %44, %45
  %arrayidx = getelementptr inbounds i16, ptr %42, i32 %mul29
  %46 = load i16, ptr %arrayidx, align 2, !tbaa !18
  %conv = sext i16 %46 to i32
  %47 = load ptr, ptr %f_data, align 4, !tbaa !4
  %48 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %48, i32 0, i32 1
  %49 = load i32, ptr %step_x30, align 4, !tbaa !10
  %50 = load i32, ptr %x, align 4, !tbaa !8
  %mul31 = mul nsw i32 %49, %50
  %arrayidx32 = getelementptr inbounds i16, ptr %47, i32 %mul31
  %51 = load i16, ptr %arrayidx32, align 2, !tbaa !18
  %conv33 = sext i16 %51 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %52 = load i64, ptr %acc0, align 8, !tbaa !16
  %add = add nsw i64 %52, %conv35
  store i64 %add, ptr %acc0, align 8, !tbaa !16
  %53 = load ptr, ptr %i_data, align 4, !tbaa !4
  %54 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %54, i32 0, i32 1
  %55 = load i32, ptr %step_x36, align 4, !tbaa !10
  %56 = load i32, ptr %x, align 4, !tbaa !8
  %add37 = add nsw i32 %56, 1
  %mul38 = mul nsw i32 %55, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %53, i32 %mul38
  %57 = load i16, ptr %arrayidx39, align 2, !tbaa !18
  %conv40 = sext i16 %57 to i32
  %58 = load ptr, ptr %f_data, align 4, !tbaa !4
  %59 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %59, i32 0, i32 1
  %60 = load i32, ptr %step_x41, align 4, !tbaa !10
  %61 = load i32, ptr %x, align 4, !tbaa !8
  %add42 = add nsw i32 %61, 1
  %mul43 = mul nsw i32 %60, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %58, i32 %mul43
  %62 = load i16, ptr %arrayidx44, align 2, !tbaa !18
  %conv45 = sext i16 %62 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %63 = load i64, ptr %acc1, align 8, !tbaa !16
  %add48 = add nsw i64 %63, %conv47
  store i64 %add48, ptr %acc1, align 8, !tbaa !16
  %64 = load ptr, ptr %i_data, align 4, !tbaa !4
  %65 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %65, i32 0, i32 1
  %66 = load i32, ptr %step_x49, align 4, !tbaa !10
  %67 = load i32, ptr %x, align 4, !tbaa !8
  %add50 = add nsw i32 %67, 2
  %mul51 = mul nsw i32 %66, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %64, i32 %mul51
  %68 = load i16, ptr %arrayidx52, align 2, !tbaa !18
  %conv53 = sext i16 %68 to i32
  %69 = load ptr, ptr %f_data, align 4, !tbaa !4
  %70 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %70, i32 0, i32 1
  %71 = load i32, ptr %step_x54, align 4, !tbaa !10
  %72 = load i32, ptr %x, align 4, !tbaa !8
  %add55 = add nsw i32 %72, 2
  %mul56 = mul nsw i32 %71, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %69, i32 %mul56
  %73 = load i16, ptr %arrayidx57, align 2, !tbaa !18
  %conv58 = sext i16 %73 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %74 = load i64, ptr %acc2, align 8, !tbaa !16
  %add61 = add nsw i64 %74, %conv60
  store i64 %add61, ptr %acc2, align 8, !tbaa !16
  %75 = load ptr, ptr %i_data, align 4, !tbaa !4
  %76 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %76, i32 0, i32 1
  %77 = load i32, ptr %step_x62, align 4, !tbaa !10
  %78 = load i32, ptr %x, align 4, !tbaa !8
  %add63 = add nsw i32 %78, 3
  %mul64 = mul nsw i32 %77, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %75, i32 %mul64
  %79 = load i16, ptr %arrayidx65, align 2, !tbaa !18
  %conv66 = sext i16 %79 to i32
  %80 = load ptr, ptr %f_data, align 4, !tbaa !4
  %81 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %81, i32 0, i32 1
  %82 = load i32, ptr %step_x67, align 4, !tbaa !10
  %83 = load i32, ptr %x, align 4, !tbaa !8
  %add68 = add nsw i32 %83, 3
  %mul69 = mul nsw i32 %82, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %80, i32 %mul69
  %84 = load i16, ptr %arrayidx70, align 2, !tbaa !18
  %conv71 = sext i16 %84 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %85 = load i64, ptr %acc3, align 8, !tbaa !16
  %add74 = add nsw i64 %85, %conv73
  store i64 %add74, ptr %acc3, align 8, !tbaa !16
  %86 = load ptr, ptr %i_data, align 4, !tbaa !4
  %87 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %87, i32 0, i32 1
  %88 = load i32, ptr %step_x75, align 4, !tbaa !10
  %89 = load i32, ptr %x, align 4, !tbaa !8
  %add76 = add nsw i32 %89, 4
  %mul77 = mul nsw i32 %88, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %86, i32 %mul77
  %90 = load i16, ptr %arrayidx78, align 2, !tbaa !18
  %conv79 = sext i16 %90 to i32
  %91 = load ptr, ptr %f_data, align 4, !tbaa !4
  %92 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %92, i32 0, i32 1
  %93 = load i32, ptr %step_x80, align 4, !tbaa !10
  %94 = load i32, ptr %x, align 4, !tbaa !8
  %add81 = add nsw i32 %94, 4
  %mul82 = mul nsw i32 %93, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %91, i32 %mul82
  %95 = load i16, ptr %arrayidx83, align 2, !tbaa !18
  %conv84 = sext i16 %95 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %96 = load i64, ptr %acc4, align 8, !tbaa !16
  %add87 = add nsw i64 %96, %conv86
  store i64 %add87, ptr %acc4, align 8, !tbaa !16
  %97 = load ptr, ptr %i_data, align 4, !tbaa !4
  %98 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %98, i32 0, i32 1
  %99 = load i32, ptr %step_x88, align 4, !tbaa !10
  %100 = load i32, ptr %x, align 4, !tbaa !8
  %add89 = add nsw i32 %100, 5
  %mul90 = mul nsw i32 %99, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %97, i32 %mul90
  %101 = load i16, ptr %arrayidx91, align 2, !tbaa !18
  %conv92 = sext i16 %101 to i32
  %102 = load ptr, ptr %f_data, align 4, !tbaa !4
  %103 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %103, i32 0, i32 1
  %104 = load i32, ptr %step_x93, align 4, !tbaa !10
  %105 = load i32, ptr %x, align 4, !tbaa !8
  %add94 = add nsw i32 %105, 5
  %mul95 = mul nsw i32 %104, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %102, i32 %mul95
  %106 = load i16, ptr %arrayidx96, align 2, !tbaa !18
  %conv97 = sext i16 %106 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %107 = load i64, ptr %acc5, align 8, !tbaa !16
  %add100 = add nsw i64 %107, %conv99
  store i64 %add100, ptr %acc5, align 8, !tbaa !16
  %108 = load ptr, ptr %i_data, align 4, !tbaa !4
  %109 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %109, i32 0, i32 1
  %110 = load i32, ptr %step_x101, align 4, !tbaa !10
  %111 = load i32, ptr %x, align 4, !tbaa !8
  %add102 = add nsw i32 %111, 6
  %mul103 = mul nsw i32 %110, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %108, i32 %mul103
  %112 = load i16, ptr %arrayidx104, align 2, !tbaa !18
  %conv105 = sext i16 %112 to i32
  %113 = load ptr, ptr %f_data, align 4, !tbaa !4
  %114 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %114, i32 0, i32 1
  %115 = load i32, ptr %step_x106, align 4, !tbaa !10
  %116 = load i32, ptr %x, align 4, !tbaa !8
  %add107 = add nsw i32 %116, 6
  %mul108 = mul nsw i32 %115, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %113, i32 %mul108
  %117 = load i16, ptr %arrayidx109, align 2, !tbaa !18
  %conv110 = sext i16 %117 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %118 = load i64, ptr %acc6, align 8, !tbaa !16
  %add113 = add nsw i64 %118, %conv112
  store i64 %add113, ptr %acc6, align 8, !tbaa !16
  %119 = load ptr, ptr %i_data, align 4, !tbaa !4
  %120 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %120, i32 0, i32 1
  %121 = load i32, ptr %step_x114, align 4, !tbaa !10
  %122 = load i32, ptr %x, align 4, !tbaa !8
  %add115 = add nsw i32 %122, 7
  %mul116 = mul nsw i32 %121, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %119, i32 %mul116
  %123 = load i16, ptr %arrayidx117, align 2, !tbaa !18
  %conv118 = sext i16 %123 to i32
  %124 = load ptr, ptr %f_data, align 4, !tbaa !4
  %125 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %125, i32 0, i32 1
  %126 = load i32, ptr %step_x119, align 4, !tbaa !10
  %127 = load i32, ptr %x, align 4, !tbaa !8
  %add120 = add nsw i32 %127, 7
  %mul121 = mul nsw i32 %126, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %124, i32 %mul121
  %128 = load i16, ptr %arrayidx122, align 2, !tbaa !18
  %conv123 = sext i16 %128 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %129 = load i64, ptr %acc7, align 8, !tbaa !16
  %add126 = add nsw i64 %129, %conv125
  store i64 %add126, ptr %acc7, align 8, !tbaa !16
  %130 = load i32, ptr %x, align 4, !tbaa !8
  %add127 = add nsw i32 %130, 8
  store i32 %add127, ptr %x, align 4, !tbaa !8
  br label %for.cond25, !llvm.loop !20

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %131 = load i32, ptr %x, align 4, !tbaa !8
  %132 = load i32, ptr %count_x.addr, align 4, !tbaa !8
  %cmp129 = icmp slt i32 %131, %132
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %133 = load ptr, ptr %i_data, align 4, !tbaa !4
  %134 = load ptr, ptr %in_image.addr, align 4, !tbaa !4
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %134, i32 0, i32 1
  %135 = load i32, ptr %step_x132, align 4, !tbaa !10
  %136 = load i32, ptr %x, align 4, !tbaa !8
  %mul133 = mul nsw i32 %135, %136
  %arrayidx134 = getelementptr inbounds i16, ptr %133, i32 %mul133
  %137 = load i16, ptr %arrayidx134, align 2, !tbaa !18
  %conv135 = sext i16 %137 to i32
  %138 = load ptr, ptr %f_data, align 4, !tbaa !4
  %139 = load ptr, ptr %filter.addr, align 4, !tbaa !4
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %139, i32 0, i32 1
  %140 = load i32, ptr %step_x136, align 4, !tbaa !10
  %141 = load i32, ptr %x, align 4, !tbaa !8
  %mul137 = mul nsw i32 %140, %141
  %arrayidx138 = getelementptr inbounds i16, ptr %138, i32 %mul137
  %142 = load i16, ptr %arrayidx138, align 2, !tbaa !18
  %conv139 = sext i16 %142 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %143 = load i64, ptr %acc, align 8, !tbaa !16
  %add142 = add nsw i64 %143, %conv141
  store i64 %add142, ptr %acc, align 8, !tbaa !16
  %144 = load i32, ptr %x, align 4, !tbaa !8
  %inc = add nsw i32 %144, 1
  store i32 %inc, ptr %x, align 4, !tbaa !8
  br label %for.cond128, !llvm.loop !22

for.end144:                                       ; preds = %for.cond128
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp1) #2
  %145 = load i64, ptr %acc0, align 8, !tbaa !16
  %146 = load i64, ptr %acc1, align 8, !tbaa !16
  %add145 = add nsw i64 %145, %146
  %conv146 = trunc i64 %add145 to i32
  store i32 %conv146, ptr %temp1, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp2) #2
  %147 = load i64, ptr %acc2, align 8, !tbaa !16
  %148 = load i64, ptr %acc3, align 8, !tbaa !16
  %add147 = add nsw i64 %147, %148
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, ptr %temp2, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp3) #2
  %149 = load i64, ptr %acc4, align 8, !tbaa !16
  %150 = load i64, ptr %acc5, align 8, !tbaa !16
  %add149 = add nsw i64 %149, %150
  %conv150 = trunc i64 %add149 to i32
  store i32 %conv150, ptr %temp3, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp4) #2
  %151 = load i64, ptr %acc6, align 8, !tbaa !16
  %152 = load i64, ptr %acc7, align 8, !tbaa !16
  %add151 = add nsw i64 %151, %152
  %conv152 = trunc i64 %add151 to i32
  store i32 %conv152, ptr %temp4, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp5) #2
  %153 = load i32, ptr %temp1, align 4, !tbaa !8
  %154 = load i32, ptr %temp2, align 4, !tbaa !8
  %add153 = add nsw i32 %153, %154
  store i32 %add153, ptr %temp5, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp6) #2
  %155 = load i32, ptr %temp3, align 4, !tbaa !8
  %156 = load i32, ptr %temp4, align 4, !tbaa !8
  %add154 = add nsw i32 %155, %156
  store i32 %add154, ptr %temp6, align 4, !tbaa !8
  call void @llvm.lifetime.start.p0(i64 4, ptr %temp7) #2
  %157 = load i32, ptr %temp5, align 4, !tbaa !8
  %158 = load i32, ptr %temp6, align 4, !tbaa !8
  %add155 = add nsw i32 %157, %158
  store i32 %add155, ptr %temp7, align 4, !tbaa !8
  %159 = load i32, ptr %temp7, align 4, !tbaa !8
  %conv156 = sext i32 %159 to i64
  %160 = load i64, ptr %acc, align 8, !tbaa !16
  %add157 = add nsw i64 %160, %conv156
  store i64 %add157, ptr %acc, align 8, !tbaa !16
  %161 = load i32, ptr %i_step, align 4, !tbaa !8
  %162 = load ptr, ptr %i_data, align 4, !tbaa !4
  %add.ptr = getelementptr inbounds i16, ptr %162, i32 %161
  store ptr %add.ptr, ptr %i_data, align 4, !tbaa !4
  %163 = load i32, ptr %f_step, align 4, !tbaa !8
  %164 = load ptr, ptr %f_data, align 4, !tbaa !4
  %add.ptr158 = getelementptr inbounds i16, ptr %164, i32 %163
  store ptr %add.ptr158, ptr %f_data, align 4, !tbaa !4
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp7) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp6) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp5) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp4) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp3) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp2) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %temp1) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr %x) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc7) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc6) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc5) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc4) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc3) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc2) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc1) #2
  call void @llvm.lifetime.end.p0(i64 8, ptr %acc0) #2
  %165 = load i32, ptr %y, align 4, !tbaa !8
  %inc160 = add nsw i32 %165, 1
  store i32 %inc160, ptr %y, align 4, !tbaa !8
  br label %for.cond, !llvm.loop !23

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %166 = load i32, ptr %retval, align 4
  ret i32 %166
}
; *** IR Dump After SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %data = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 0
  %8 = load ptr, ptr %data, align 4, !tbaa !13
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 0
  %9 = load ptr, ptr %data17, align 4, !tbaa !13
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %10 = load i32, ptr %stride_x18, align 4, !tbaa !10
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %11 = load i32, ptr %step_y19, align 4, !tbaa !11
  %mul20 = mul nsw i32 %10, %11
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %12 = load i32, ptr %stride_x21, align 4, !tbaa !10
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %13 = load i32, ptr %step_y22, align 4, !tbaa !11
  %mul23 = mul nsw i32 %12, %13
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %14 = load i32, ptr %step_x28, align 4, !tbaa !4
  %mul29 = mul nsw i32 %14, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %15 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %15 to i32
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %16 = load i32, ptr %step_x30, align 4, !tbaa !4
  %mul31 = mul nsw i32 %16, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %17 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %17 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %18 = load i32, ptr %step_x36, align 4, !tbaa !4
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %18, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %19 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %19 to i32
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %20 = load i32, ptr %step_x41, align 4, !tbaa !4
  %add42 = add nsw i32 %x.0, 1
  %mul43 = mul nsw i32 %20, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %21 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %21 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %22 = load i32, ptr %step_x49, align 4, !tbaa !4
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %22, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %23 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %23 to i32
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %24 = load i32, ptr %step_x54, align 4, !tbaa !4
  %add55 = add nsw i32 %x.0, 2
  %mul56 = mul nsw i32 %24, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %25 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %25 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %26 = load i32, ptr %step_x62, align 4, !tbaa !4
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %26, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %27 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %27 to i32
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %28 = load i32, ptr %step_x67, align 4, !tbaa !4
  %add68 = add nsw i32 %x.0, 3
  %mul69 = mul nsw i32 %28, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %29 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %29 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %30 = load i32, ptr %step_x75, align 4, !tbaa !4
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %30, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %31 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %31 to i32
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %32 = load i32, ptr %step_x80, align 4, !tbaa !4
  %add81 = add nsw i32 %x.0, 4
  %mul82 = mul nsw i32 %32, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %33 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %33 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %34 = load i32, ptr %step_x88, align 4, !tbaa !4
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %34, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %35 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %35 to i32
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %36 = load i32, ptr %step_x93, align 4, !tbaa !4
  %add94 = add nsw i32 %x.0, 5
  %mul95 = mul nsw i32 %36, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %37 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %37 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %38 = load i32, ptr %step_x101, align 4, !tbaa !4
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %38, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %39 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %39 to i32
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %40 = load i32, ptr %step_x106, align 4, !tbaa !4
  %add107 = add nsw i32 %x.0, 6
  %mul108 = mul nsw i32 %40, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %41 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %41 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %42 = load i32, ptr %step_x114, align 4, !tbaa !4
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %42, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %43 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %43 to i32
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %44 = load i32, ptr %step_x119, align 4, !tbaa !4
  %add120 = add nsw i32 %x.0, 7
  %mul121 = mul nsw i32 %44, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %45 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %45 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %46 = load i32, ptr %step_x132, align 4, !tbaa !4
  %mul133 = mul nsw i32 %46, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %47 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %47 to i32
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %48 = load i32, ptr %step_x136, align 4, !tbaa !4
  %mul137 = mul nsw i32 %48, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %49 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %49 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump Before EarlyCSEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %data = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 0
  %8 = load ptr, ptr %data, align 4, !tbaa !13
  %data17 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 0
  %9 = load ptr, ptr %data17, align 4, !tbaa !13
  %stride_x18 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %10 = load i32, ptr %stride_x18, align 4, !tbaa !10
  %step_y19 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %11 = load i32, ptr %step_y19, align 4, !tbaa !11
  %mul20 = mul nsw i32 %10, %11
  %stride_x21 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %12 = load i32, ptr %stride_x21, align 4, !tbaa !10
  %step_y22 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %13 = load i32, ptr %step_y22, align 4, !tbaa !11
  %mul23 = mul nsw i32 %12, %13
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %step_x28 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %14 = load i32, ptr %step_x28, align 4, !tbaa !4
  %mul29 = mul nsw i32 %14, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %15 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %15 to i32
  %step_x30 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %16 = load i32, ptr %step_x30, align 4, !tbaa !4
  %mul31 = mul nsw i32 %16, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %17 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %17 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %step_x36 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %18 = load i32, ptr %step_x36, align 4, !tbaa !4
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %18, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %19 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %19 to i32
  %step_x41 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %20 = load i32, ptr %step_x41, align 4, !tbaa !4
  %add42 = add nsw i32 %x.0, 1
  %mul43 = mul nsw i32 %20, %add42
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %21 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %21 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %step_x49 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %22 = load i32, ptr %step_x49, align 4, !tbaa !4
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %22, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %23 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %23 to i32
  %step_x54 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %24 = load i32, ptr %step_x54, align 4, !tbaa !4
  %add55 = add nsw i32 %x.0, 2
  %mul56 = mul nsw i32 %24, %add55
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %25 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %25 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %step_x62 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %26 = load i32, ptr %step_x62, align 4, !tbaa !4
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %26, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %27 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %27 to i32
  %step_x67 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %28 = load i32, ptr %step_x67, align 4, !tbaa !4
  %add68 = add nsw i32 %x.0, 3
  %mul69 = mul nsw i32 %28, %add68
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %29 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %29 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %step_x75 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %30 = load i32, ptr %step_x75, align 4, !tbaa !4
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %30, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %31 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %31 to i32
  %step_x80 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %32 = load i32, ptr %step_x80, align 4, !tbaa !4
  %add81 = add nsw i32 %x.0, 4
  %mul82 = mul nsw i32 %32, %add81
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %33 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %33 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %step_x88 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %34 = load i32, ptr %step_x88, align 4, !tbaa !4
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %34, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %35 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %35 to i32
  %step_x93 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %36 = load i32, ptr %step_x93, align 4, !tbaa !4
  %add94 = add nsw i32 %x.0, 5
  %mul95 = mul nsw i32 %36, %add94
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %37 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %37 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %step_x101 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %38 = load i32, ptr %step_x101, align 4, !tbaa !4
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %38, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %39 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %39 to i32
  %step_x106 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %40 = load i32, ptr %step_x106, align 4, !tbaa !4
  %add107 = add nsw i32 %x.0, 6
  %mul108 = mul nsw i32 %40, %add107
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %41 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %41 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %step_x114 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %42 = load i32, ptr %step_x114, align 4, !tbaa !4
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %42, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %43 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %43 to i32
  %step_x119 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %44 = load i32, ptr %step_x119, align 4, !tbaa !4
  %add120 = add nsw i32 %x.0, 7
  %mul121 = mul nsw i32 %44, %add120
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %45 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %45 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %step_x132 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %46 = load i32, ptr %step_x132, align 4, !tbaa !4
  %mul133 = mul nsw i32 %46, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %47 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %47 to i32
  %step_x136 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %48 = load i32, ptr %step_x136, align 4, !tbaa !4
  %mul137 = mul nsw i32 %48, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %49 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %49 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump After EarlyCSEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump Before OpenMPOptPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After OpenMPOptPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before IPSCCPPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After IPSCCPPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before CalledValuePropagationPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After CalledValuePropagationPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before GlobalOptPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before PromotePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump After PromotePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = sub nsw i32 %shift, 1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = sub nsw i32 %count_x, 7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = add nsw i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = add nsw i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = add nsw i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = add nsw i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = add nsw i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = add nsw i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = add nsw i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %return

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end10
  br label %return

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.body:                                         ; preds = %for.cond
  br label %for.cond25

for.cond25:                                       ; preds = %for.body27, %for.body
  %acc2.0 = phi i64 [ 0, %for.body ], [ %add61, %for.body27 ]
  %acc3.0 = phi i64 [ 0, %for.body ], [ %add74, %for.body27 ]
  %acc4.0 = phi i64 [ 0, %for.body ], [ %add87, %for.body27 ]
  %acc5.0 = phi i64 [ 0, %for.body ], [ %add100, %for.body27 ]
  %acc6.0 = phi i64 [ 0, %for.body ], [ %add113, %for.body27 ]
  %acc7.0 = phi i64 [ 0, %for.body ], [ %add126, %for.body27 ]
  %x.0 = phi i32 [ 0, %for.body ], [ %add127, %for.body27 ]
  %acc1.0 = phi i64 [ 0, %for.body ], [ %add48, %for.body27 ]
  %acc0.0 = phi i64 [ 0, %for.body ], [ %add, %for.body27 ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %for.cond.cleanup, %if.then15, %if.then9, %if.then3, %if.then
  %retval.0 = phi i32 [ 458755, %if.then ], [ 458755, %if.then3 ], [ 458755, %if.then9 ], [ 458755, %if.then15 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before AlwaysInlinerPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After AlwaysInlinerPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before RequireAnalysisPass<llvm::GlobalsAA, llvm::Module> on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After RequireAnalysisPass<llvm::GlobalsAA, llvm::Module> on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before InvalidateAnalysisPass<llvm::AAManager> on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before RequireAnalysisPass<llvm::ProfileSummaryAnalysis, llvm::Module> on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After RequireAnalysisPass<llvm::ProfileSummaryAnalysis, llvm::Module> on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before InlinerPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InlinerPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before PostOrderFunctionAttrsPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr noundef %in_image, ptr noundef %filter, ptr noundef %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After PostOrderFunctionAttrsPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before OpenMPOptCGSCCPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After OpenMPOptCGSCCPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before EarlyCSEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %10 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul29 = mul nsw i32 %10, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %12 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul31 = mul nsw i32 %12, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %13 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %13 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %10, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %14 to i32
  %mul43 = mul nsw i32 %12, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %15 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %15 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %10, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %16 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %16 to i32
  %mul56 = mul nsw i32 %12, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %17 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %17 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %10, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %18 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %18 to i32
  %mul69 = mul nsw i32 %12, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %19 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %19 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %10, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %20 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %20 to i32
  %mul82 = mul nsw i32 %12, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %21 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %21 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %10, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %22 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %22 to i32
  %mul95 = mul nsw i32 %12, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %23 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %23 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %10, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %24 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %24 to i32
  %mul108 = mul nsw i32 %12, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %25 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %25 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %10, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %26 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %26 to i32
  %mul121 = mul nsw i32 %12, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %27 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %27 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %28 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul133 = mul nsw i32 %28, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %29 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %29 to i32
  %30 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul137 = mul nsw i32 %30, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After EarlyCSEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SpeculativeExecutionPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SpeculativeExecutionPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before JumpThreadingPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After JumpThreadingPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before CorrelatedValuePropagationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After CorrelatedValuePropagationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before AggressiveInstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i64 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i64 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i64 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i64 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i64 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i64 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i64 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i64 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %conv35 = sext i32 %mul34 to i64
  %add = add nsw i64 %acc0.0, %conv35
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %conv47 = sext i32 %mul46 to i64
  %add48 = add nsw i64 %acc1.0, %conv47
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %conv60 = sext i32 %mul59 to i64
  %add61 = add nsw i64 %acc2.0, %conv60
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %conv73 = sext i32 %mul72 to i64
  %add74 = add nsw i64 %acc3.0, %conv73
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %conv86 = sext i32 %mul85 to i64
  %add87 = add nsw i64 %acc4.0, %conv86
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %conv99 = sext i32 %mul98 to i64
  %add100 = add nsw i64 %acc5.0, %conv99
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %conv112 = sext i32 %mul111 to i64
  %add113 = add nsw i64 %acc6.0, %conv112
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %conv125 = sext i32 %mul124 to i64
  %add126 = add nsw i64 %acc7.0, %conv125
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add nsw i64 %acc0.0, %acc1.0
  %conv146 = trunc i64 %add145 to i32
  %add147 = add nsw i64 %acc2.0, %acc3.0
  %conv148 = trunc i64 %add147 to i32
  %add149 = add nsw i64 %acc4.0, %acc5.0
  %conv150 = trunc i64 %add149 to i32
  %add151 = add nsw i64 %acc6.0, %acc7.0
  %conv152 = trunc i64 %add151 to i32
  %add153 = add nsw i32 %conv146, %conv148
  %add154 = add nsw i32 %conv150, %conv152
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After AggressiveInstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LibCallsShrinkWrapPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LibCallsShrinkWrapPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before TailCallElimPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After TailCallElimPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before ReassociatePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %1, %2
  %mul23 = mul nsw i32 %5, %6
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %0, %x.0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %4, %x.0
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv, %conv33
  %add = add i32 %acc0.0, %mul34
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %0, %add37
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %4, %add37
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv40, %conv45
  %add48 = add i32 %acc1.0, %mul46
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %0, %add50
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %4, %add50
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv53, %conv58
  %add61 = add i32 %acc2.0, %mul59
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %0, %add63
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %4, %add63
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv66, %conv71
  %add74 = add i32 %acc3.0, %mul72
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %0, %add76
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %4, %add76
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv79, %conv84
  %add87 = add i32 %acc4.0, %mul85
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %0, %add89
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %4, %add89
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv92, %conv97
  %add100 = add i32 %acc5.0, %mul98
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %0, %add102
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %4, %add102
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv105, %conv110
  %add113 = add i32 %acc6.0, %mul111
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %0, %add115
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %4, %add115
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv118, %conv123
  %add126 = add i32 %acc7.0, %mul124
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %0, %x.1
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %4, %x.1
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv135, %conv139
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1, %conv141
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc0.0, %acc1.0
  %add147 = add i32 %acc2.0, %acc3.0
  %add149 = add i32 %acc4.0, %acc5.0
  %add151 = add i32 %acc6.0, %acc7.0
  %add153 = add nsw i32 %add145, %add147
  %add154 = add nsw i32 %add149, %add151
  %add155 = add nsw i32 %add153, %add154
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After ReassociatePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc3.0, %acc2.0
  %add147 = add i32 %add145, %acc4.0
  %add153 = add i32 %add147, %acc5.0
  %add151 = add i32 %add153, %acc6.0
  %add149 = add i32 %add151, %acc7.0
  %add154 = add i32 %add149, %acc1.0
  %add155 = add i32 %add154, %acc0.0
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before ConstraintEliminationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc3.0, %acc2.0
  %add147 = add i32 %add145, %acc4.0
  %add153 = add i32 %add147, %acc5.0
  %add151 = add i32 %add153, %acc6.0
  %add149 = add i32 %add151, %acc7.0
  %add154 = add i32 %add149, %acc1.0
  %add155 = add i32 %add154, %acc0.0
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After ConstraintEliminationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc3.0, %acc2.0
  %add147 = add i32 %add145, %acc4.0
  %add153 = add i32 %add147, %acc5.0
  %add151 = add i32 %add153, %acc6.0
  %add149 = add i32 %add151, %acc7.0
  %add154 = add i32 %add149, %acc1.0
  %add155 = add i32 %add154, %acc0.0
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond25, %for.body131
  %x.1 = phi i32 [ %x.0, %for.cond25 ], [ %inc, %for.body131 ]
  %acc.1 = phi i64 [ %acc.0, %for.cond25 ], [ %add142, %for.body131 ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc3.0, %acc2.0
  %add147 = add i32 %add145, %acc4.0
  %add153 = add i32 %add147, %acc5.0
  %add151 = add i32 %add153, %acc6.0
  %add149 = add i32 %add151, %acc7.0
  %add154 = add i32 %add149, %acc1.0
  %add155 = add i32 %add154, %acc0.0
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond25
  br label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc3.0, %acc2.0
  %add147 = add i32 %add145, %acc4.0
  %add153 = add i32 %add147, %acc5.0
  %add151 = add i32 %add153, %acc6.0
  %add149 = add i32 %add151, %acc7.0
  %add154 = add i32 %add149, %acc1.0
  %add155 = add i32 %add154, %acc0.0
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

for.cond.cleanup:                                 ; preds = %for.cond
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond25
  br label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %add145 = add i32 %acc3.0, %acc2.0
  %add147 = add i32 %add145, %acc4.0
  %add153 = add i32 %add147, %acc5.0
  %add151 = add i32 %add153, %acc6.0
  %add149 = add i32 %add151, %acc7.0
  %add154 = add i32 %add149, %acc1.0
  %add155 = add i32 %add154, %acc0.0
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopInstSimplifyPass on for.cond25 ***

; Preheader:
for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

; Loop:
for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

; Exit blocks
for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128
; *** IR Dump After LoopInstSimplifyPass on for.cond25 ***

; Preheader:
for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

; Loop:
for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

; Exit blocks
for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128
; *** IR Dump Before LoopSimplifyCFGPass on for.cond25 ***

; Preheader:
for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

; Loop:
for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

; Exit blocks
for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128
; *** IR Dump After LoopSimplifyCFGPass on for.cond25 ***

; Preheader:
for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

; Loop:
for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

; Exit blocks
for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128
; *** IR Dump Before LICMPass on for.cond25 ***

; Preheader:
for.cond25.preheader:                             ; preds = %for.cond
  br label %for.cond25

; Loop:
for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %sub = add nsw i32 %count_x, -7
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

; Exit blocks
for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128
; *** IR Dump After LICMPass on for.cond25 ***

; Preheader:
for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  br label %for.cond25

; Loop:
for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

; Exit blocks
for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128
; *** IR Dump Before LoopRotatePass on for.cond25 ***

; Preheader:
for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  br label %for.cond25

; Loop:
for.cond25:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc2.0 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc0.0 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %cmp26 = icmp slt i32 %x.0, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader

for.body27:                                       ; preds = %for.cond25
  %mul29 = mul nsw i32 %x.0, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0
  %add37 = or disjoint i32 %x.0, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0
  %add50 = or disjoint i32 %x.0, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0
  %add63 = or disjoint i32 %x.0, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0
  %add76 = or disjoint i32 %x.0, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0
  %add89 = or disjoint i32 %x.0, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0
  %add102 = or disjoint i32 %x.0, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0
  %add115 = or disjoint i32 %x.0, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0
  %add127 = add nuw nsw i32 %x.0, 8
  br label %for.cond25, !llvm.loop !16

; Exit blocks
for.cond128.preheader:                            ; preds = %for.cond25
  %acc2.0.lcssa = phi i32 [ %acc2.0, %for.cond25 ]
  %acc3.0.lcssa = phi i32 [ %acc3.0, %for.cond25 ]
  %acc4.0.lcssa = phi i32 [ %acc4.0, %for.cond25 ]
  %acc5.0.lcssa = phi i32 [ %acc5.0, %for.cond25 ]
  %acc6.0.lcssa = phi i32 [ %acc6.0, %for.cond25 ]
  %acc7.0.lcssa = phi i32 [ %acc7.0, %for.cond25 ]
  %x.0.lcssa = phi i32 [ %x.0, %for.cond25 ]
  %acc1.0.lcssa = phi i32 [ %acc1.0, %for.cond25 ]
  %acc0.0.lcssa = phi i32 [ %acc0.0, %for.cond25 ]
  br label %for.cond128
; *** IR Dump After LoopRotatePass on for.cond25 ***

; Preheader:
for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

; Exit blocks
for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LICMPass on for.body27 ***

; Preheader:
for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

; Exit blocks
for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LICMPass on for.body27 ***

; Preheader:
for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

; Exit blocks
for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before SimpleLoopUnswitchPass on for.body27 ***

; Preheader:
for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

; Exit blocks
for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After SimpleLoopUnswitchPass on for.body27 ***

; Preheader:
for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

; Exit blocks
for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LoopInstSimplifyPass on for.cond128 ***

; Preheader:
for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  br label %for.cond128

; Loop:
for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

; Exit blocks
for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19
; *** IR Dump After LoopInstSimplifyPass on for.cond128 ***

; Preheader:
for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  br label %for.cond128

; Loop:
for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

; Exit blocks
for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19
; *** IR Dump Before LoopSimplifyCFGPass on for.cond128 ***

; Preheader:
for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  br label %for.cond128

; Loop:
for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

; Exit blocks
for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19
; *** IR Dump After LoopSimplifyCFGPass on for.cond128 ***

; Preheader:
for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  br label %for.cond128

; Loop:
for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

; Exit blocks
for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19
; *** IR Dump Before LICMPass on for.cond128 ***

; Preheader:
for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  br label %for.cond128

; Loop:
for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

; Exit blocks
for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19
; *** IR Dump After LICMPass on for.cond128 ***

; Preheader:
for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  br label %for.cond128

; Loop:
for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

; Exit blocks
for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19
; *** IR Dump Before LoopRotatePass on for.cond128 ***

; Preheader:
for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  br label %for.cond128

; Loop:
for.cond128:                                      ; preds = %for.cond128.preheader, %for.body131
  %x.1 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %acc.1 = phi i64 [ %add142, %for.body131 ], [ %acc.0, %for.cond128.preheader ]
  %cmp129 = icmp slt i32 %x.1, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144

for.body131:                                      ; preds = %for.cond128
  %mul133 = mul nsw i32 %x.1, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1
  %inc = add nuw nsw i32 %x.1, 1
  br label %for.cond128, !llvm.loop !18

; Exit blocks
for.end144:                                       ; preds = %for.cond128
  %acc.1.lcssa = phi i64 [ %acc.1, %for.cond128 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19
; *** IR Dump After LoopRotatePass on for.cond128 ***

; Preheader:
for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

; Exit blocks
for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LICMPass on for.body131 ***

; Preheader:
for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

; Exit blocks
for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LICMPass on for.body131 ***

; Preheader:
for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

; Exit blocks
for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before SimpleLoopUnswitchPass on for.body131 ***

; Preheader:
for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

; Exit blocks
for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After SimpleLoopUnswitchPass on for.body131 ***

; Preheader:
for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

; Exit blocks
for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LoopInstSimplifyPass on for.cond ***

; Preheader:
if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return
; *** IR Dump After LoopInstSimplifyPass on for.cond ***

; Preheader:
if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return
; *** IR Dump Before LoopSimplifyCFGPass on for.cond ***

; Preheader:
if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return
; *** IR Dump After LoopSimplifyCFGPass on for.cond ***

; Preheader:
if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return
; *** IR Dump Before LICMPass on for.cond ***

; Preheader:
if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return
; *** IR Dump After LICMPass on for.cond ***

; Preheader:
if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return
; *** IR Dump Before LoopRotatePass on for.cond ***

; Preheader:
if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  br label %for.cond

; Loop:
for.cond:                                         ; preds = %for.end144, %if.end16
  %y.0 = phi i32 [ 0, %if.end16 ], [ %inc160, %for.end144 ]
  %acc.0 = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %f_data.0 = phi ptr [ %9, %if.end16 ], [ %add.ptr158, %for.end144 ]
  %i_data.0 = phi ptr [ %8, %if.end16 ], [ %add.ptr, %for.end144 ]
  %cmp24 = icmp slt i32 %y.0, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0, 1
  br label %for.cond, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.cond25.preheader:                             ; preds = %for.cond
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.cond
  %acc.0.lcssa = phi i64 [ %acc.0, %for.cond ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return
; *** IR Dump After LoopRotatePass on for.cond ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0279, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.for.cond.cleanup_crit_edge, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0279, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.end144
  %split282 = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before LICMPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0279, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.for.cond.cleanup_crit_edge, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0279, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.end144
  %split282 = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LICMPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0279, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.for.cond.cleanup_crit_edge, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0279, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.end144
  %split282 = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before SimpleLoopUnswitchPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0279, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.for.cond.cleanup_crit_edge, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0279, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.end144
  %split282 = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After SimpleLoopUnswitchPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0279, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.for.cond.cleanup_crit_edge, !llvm.loop !19

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0279, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

; Exit blocks
for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.end144
  %split282 = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp slt i32 0, %count_y
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.lr.ph, label %for.cond128.preheader

for.body27.lr.ph:                                 ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.end144
  %split282 = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end16
  %acc.0.lcssa = phi i64 [ %split282, %for.cond.for.cond.cleanup_crit_edge ], [ 0, %if.end16 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond25.for.cond128.preheader_crit_edge:       ; preds = %for.body27
  %split = phi i32 [ %add61, %for.body27 ]
  %split265 = phi i32 [ %add74, %for.body27 ]
  %split266 = phi i32 [ %add87, %for.body27 ]
  %split267 = phi i32 [ %add100, %for.body27 ]
  %split268 = phi i32 [ %add113, %for.body27 ]
  %split269 = phi i32 [ %add126, %for.body27 ]
  %split270 = phi i32 [ %add127, %for.body27 ]
  %split271 = phi i32 [ %add48, %for.body27 ]
  %split272 = phi i32 [ %add, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond25.for.cond128.preheader_crit_edge, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ %split, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc3.0.lcssa = phi i32 [ %split265, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc4.0.lcssa = phi i32 [ %split266, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc5.0.lcssa = phi i32 [ %split267, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc6.0.lcssa = phi i32 [ %split268, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc7.0.lcssa = phi i32 [ %split269, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %x.0.lcssa = phi i32 [ %split270, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc1.0.lcssa = phi i32 [ %split271, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %acc0.0.lcssa = phi i32 [ %split272, %for.cond25.for.cond128.preheader_crit_edge ], [ 0, %for.cond25.preheader ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.lr.ph, label %for.end144

for.body131.lr.ph:                                ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.lr.ph, %for.body27
  %acc0.0264 = phi i32 [ 0, %for.body27.lr.ph ], [ %add, %for.body27 ]
  %acc1.0263 = phi i32 [ 0, %for.body27.lr.ph ], [ %add48, %for.body27 ]
  %x.0262 = phi i32 [ 0, %for.body27.lr.ph ], [ %add127, %for.body27 ]
  %acc7.0261 = phi i32 [ 0, %for.body27.lr.ph ], [ %add126, %for.body27 ]
  %acc6.0260 = phi i32 [ 0, %for.body27.lr.ph ], [ %add113, %for.body27 ]
  %acc5.0259 = phi i32 [ 0, %for.body27.lr.ph ], [ %add100, %for.body27 ]
  %acc4.0258 = phi i32 [ 0, %for.body27.lr.ph ], [ %add87, %for.body27 ]
  %acc3.0257 = phi i32 [ 0, %for.body27.lr.ph ], [ %add74, %for.body27 ]
  %acc2.0256 = phi i32 [ 0, %for.body27.lr.ph ], [ %add61, %for.body27 ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond25.for.cond128.preheader_crit_edge, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.lr.ph, %for.body131
  %acc.1275 = phi i64 [ %acc.0279, %for.body131.lr.ph ], [ %add142, %for.body131 ]
  %x.1274 = phi i32 [ %x.0.lcssa, %for.body131.lr.ph ], [ %inc, %for.body131 ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.cond128.for.end144_crit_edge, !llvm.loop !18

for.cond128.for.end144_crit_edge:                 ; preds = %for.body131
  %split276 = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.cond128.for.end144_crit_edge, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %split276, %for.cond128.for.end144_crit_edge ], [ %acc.0279, %for.cond128.preheader ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.for.cond.cleanup_crit_edge, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp slt i32 0, %count_y
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add127, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %8 = load ptr, ptr %in_image, align 4, !tbaa !13
  %9 = load ptr, ptr %filter, align 4, !tbaa !13
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp slt i32 0, %count_y
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp slt i32 0, %sub
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add127, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %conv141, %acc.1275
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add127, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add127, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add127, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add127, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  %add127.lcssa = phi i32 [ %add127, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add127.lcssa, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %26 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %26 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %27 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %27 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopIdiomRecognizePass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  %add127.lcssa = phi i32 [ %add127, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LoopIdiomRecognizePass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  %add127.lcssa = phi i32 [ %add127, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before IndVarSimplifyPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %10 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %10 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %11 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %11 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %12 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %12 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %13 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %13 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %14 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %14 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %15 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %15 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %16 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %16 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %17 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %17 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %18 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %18 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %19 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %19 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %20 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %20 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %21 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %21 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %22 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %22 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %23 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %23 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %24 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %24 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %25 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %25 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  %add127.lcssa = phi i32 [ %add127, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After IndVarSimplifyPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LoopDeletionPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LoopDeletionPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LoopFullUnrollPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LoopFullUnrollPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LoopIdiomRecognizePass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LoopIdiomRecognizePass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before IndVarSimplifyPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %cmp129 = icmp slt i32 %inc, %count_x
  br i1 %cmp129, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After IndVarSimplifyPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LoopDeletionPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LoopDeletionPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LoopFullUnrollPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LoopFullUnrollPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LoopIdiomRecognizePass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LoopIdiomRecognizePass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before IndVarSimplifyPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %cmp24 = icmp slt i32 %inc160, %count_y
  br i1 %cmp24, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After IndVarSimplifyPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before LoopDeletionPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LoopDeletionPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before LoopFullUnrollPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LoopFullUnrollPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before VectorCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After VectorCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before MergedLoadStoreMotionPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After MergedLoadStoreMotionPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before GVNPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After GVNPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SCCPPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SCCPPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before BDCEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After BDCEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = add i32 %count_x, -8
  %11 = lshr i32 %10, 3
  %12 = shl nuw i32 %11, 3
  %13 = add i32 %12, 8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %13, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %14 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %14 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %15 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %15 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %16 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %16 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %17 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %17 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %18 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %18 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %19 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %19 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %20 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %20 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %21 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %21 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %22 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %22 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %23 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %23 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %24 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %24 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %25 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %25 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %26 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %26 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %27 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %27 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %28 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %28 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %29 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %29 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %30 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %30 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %31 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %31 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond = icmp ne i32 %inc, %count_x
  br i1 %exitcond, label %for.body131, label %for.end144.loopexit, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283 = icmp ne i32 %inc160, %count_y
  br i1 %exitcond283, label %for.cond25.preheader, label %for.cond.cleanup.loopexit, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before JumpThreadingPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After JumpThreadingPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before CorrelatedValuePropagationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After CorrelatedValuePropagationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before ADCEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After ADCEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before MemCpyOptPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After MemCpyOptPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before DSEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After DSEPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before MoveAutoInitPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After MoveAutoInitPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LICMPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LICMPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LICMPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LICMPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LICMPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LICMPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before CoroElidePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After CoroElidePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before PostOrderFunctionAttrsPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nounwind
define dso_local i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After PostOrderFunctionAttrsPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before RequireAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis, llvm::Function> on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After RequireAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis, llvm::Function> on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before CoroSplitPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After CoroSplitPass on (dspi_dotprod_s16_ansi) ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before DeadArgumentEliminationPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After DeadArgumentEliminationPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before CoroCleanupPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After CoroCleanupPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before GlobalOptPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before GlobalDCEPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before EliminateAvailableExternallyPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After EliminateAvailableExternallyPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before ReversePostOrderFunctionAttrsPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After ReversePostOrderFunctionAttrsPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before RecomputeGlobalsAAPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After RecomputeGlobalsAAPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before Float2IntPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After Float2IntPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LowerConstantIntrinsicsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LowerConstantIntrinsicsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopRotatePass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LoopRotatePass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LoopDeletionPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LoopDeletionPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LoopRotatePass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LoopRotatePass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LoopDeletionPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LoopDeletionPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LoopRotatePass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LoopRotatePass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before LoopDeletionPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LoopDeletionPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before LoopDistributePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopDistributePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InjectTLIMappings on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InjectTLIMappings on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopVectorizePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopVectorizePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InferAlignmentPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InferAlignmentPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopLoadEliminationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopLoadEliminationPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SLPVectorizerPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SLPVectorizerPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before VectorCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After VectorCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopUnrollPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopUnrollPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before WarnMissedTransformationsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After WarnMissedTransformationsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SROAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InferAlignmentPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InferAlignmentPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstCombinePass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LCSSAPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LICMPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump After LICMPass on for.body27 ***

; Preheader:
for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

; Loop:
for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

; Exit blocks
for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader
; *** IR Dump Before LICMPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump After LICMPass on for.body131 ***

; Preheader:
for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

; Loop:
for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

; Exit blocks
for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144
; *** IR Dump Before LICMPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump After LICMPass on for.cond25.preheader ***

; Preheader:
for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

; Loop:
for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup
; *** IR Dump Before AlignmentFromAssumptionsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After AlignmentFromAssumptionsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before LoopSinkPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After LoopSinkPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before InstSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  %add157.lcssa = phi i64 [ %add157, %for.end144 ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157.lcssa, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  %add.lcssa = phi i32 [ %add, %for.body27 ]
  %add48.lcssa = phi i32 [ %add48, %for.body27 ]
  %add61.lcssa = phi i32 [ %add61, %for.body27 ]
  %add74.lcssa = phi i32 [ %add74, %for.body27 ]
  %add87.lcssa = phi i32 [ %add87, %for.body27 ]
  %add100.lcssa = phi i32 [ %add100, %for.body27 ]
  %add113.lcssa = phi i32 [ %add113, %for.body27 ]
  %add126.lcssa = phi i32 [ %add126, %for.body27 ]
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61.lcssa, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74.lcssa, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87.lcssa, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100.lcssa, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113.lcssa, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126.lcssa, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48.lcssa, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add.lcssa, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  %add142.lcssa = phi i64 [ %add142, %for.body131 ]
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142.lcssa, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After InstSimplifyPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before DivRemPairsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After DivRemPairsPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before TailCallElimPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After TailCallElimPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27.preheader, label %for.cond128.preheader

for.body27.preheader:                             ; preds = %for.cond25.preheader
  br label %for.body27

for.cond.cleanup.loopexit:                        ; preds = %for.end144
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.cond.cleanup.loopexit ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader.loopexit:                   ; preds = %for.body27
  br label %for.cond128.preheader

for.cond128.preheader:                            ; preds = %for.cond128.preheader.loopexit, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.cond128.preheader.loopexit ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.cond128.preheader.loopexit ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.cond128.preheader.loopexit ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.cond128.preheader.loopexit ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.cond128.preheader.loopexit ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.cond128.preheader.loopexit ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.cond128.preheader.loopexit ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.cond128.preheader.loopexit ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.cond128.preheader.loopexit ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131.preheader, label %for.end144

for.body131.preheader:                            ; preds = %for.cond128.preheader
  br label %for.body131

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.body27.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.body27.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.body27.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader.loopexit, !llvm.loop !16

for.body131:                                      ; preds = %for.body131.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.body131.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.body131.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144.loopexit, label %for.body131, !llvm.loop !18

for.end144.loopexit:                              ; preds = %for.body131
  br label %for.end144

for.end144:                                       ; preds = %for.end144.loopexit, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.end144.loopexit ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup.loopexit, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After SimplifyCFGPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump Before GlobalDCEPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before ConstantMergePass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After ConstantMergePass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before CGProfilePass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After CGProfilePass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before RelLookupTableConverterPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump After RelLookupTableConverterPass on [module] ***
; ModuleID = 'dspi_dotprod_s16_ansi_best.c'
source_filename = "dspi_dotprod_s16_ansi_best.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zca,+zcmp,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zcb,-zcd,-zce,-zcf,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-275-g0371b99 esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-553-ga5c3c9c esp-18.1.2_20240912-9-gf06e8b6 esp-18.1.2_20240912-14-g8070eda esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-22-gda2052a esp-18.1.2_20240912-29-ga622597 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-30-gc7afa9d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-32-g01e9072 esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-34-gf41581d esp-18.1.2_20240912-13-g45f4abc esp-18.1.2_20240912-40-g376cafb esp-18.1.2_20240912-41-g0acc41e esp-18.1.2_20240912-597-g19b0b49 esp-18.1.2_20240912-599-gb58e197 esp-18.1.2_20240912-602-g324d9ea esp-18.1.2_20240912-602-g324d9ea)"}
!4 = !{!5, !9, i64 4}
!5 = !{!"image2d_s", !6, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!5, !9, i64 12}
!11 = !{!5, !9, i64 8}
!12 = !{!5, !9, i64 16}
!13 = !{!5, !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"short", !7, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17}
; *** IR Dump Before AnnotationRemarksPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
; *** IR Dump After AnnotationRemarksPass on dspi_dotprod_s16_ansi ***
; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_dotprod_s16_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef writeonly %out_value, i32 noundef %count_x, i32 noundef %count_y, i32 noundef %shift) local_unnamed_addr #0 {
entry:
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %0 = load i32, ptr %step_x, align 4, !tbaa !4
  %mul = mul nsw i32 %0, %count_x
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %1 = load i32, ptr %stride_x, align 4, !tbaa !10
  %cmp = icmp sgt i32 %mul, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %2 = load i32, ptr %step_y, align 4, !tbaa !11
  %mul1 = mul nsw i32 %2, %count_y
  %stride_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 4
  %3 = load i32, ptr %stride_y, align 4, !tbaa !12
  %cmp2 = icmp sgt i32 %mul1, %3
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %step_x5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %4 = load i32, ptr %step_x5, align 4, !tbaa !4
  %mul6 = mul nsw i32 %4, %count_x
  %stride_x7 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %5 = load i32, ptr %stride_x7, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %mul6, %5
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %step_y11 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %6 = load i32, ptr %step_y11, align 4, !tbaa !11
  %mul12 = mul nsw i32 %6, %count_y
  %stride_y13 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 4
  %7 = load i32, ptr %stride_y13, align 4, !tbaa !12
  %cmp14 = icmp sgt i32 %mul12, %7
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end10
  %mul20 = mul nsw i32 %2, %1
  %mul23 = mul nsw i32 %6, %5
  %cmp24277 = icmp sgt i32 %count_y, 0
  br i1 %cmp24277, label %for.cond25.preheader.lr.ph, label %for.cond.cleanup

for.cond25.preheader.lr.ph:                       ; preds = %if.end16
  %8 = load ptr, ptr %filter, align 4, !tbaa !13
  %9 = load ptr, ptr %in_image, align 4, !tbaa !13
  %sub = add nsw i32 %count_x, -7
  %cmp26255 = icmp sgt i32 %count_x, 7
  %10 = and i32 %count_x, -8
  br label %for.cond25.preheader

for.cond25.preheader:                             ; preds = %for.cond25.preheader.lr.ph, %for.end144
  %i_data.0281 = phi ptr [ %9, %for.cond25.preheader.lr.ph ], [ %add.ptr, %for.end144 ]
  %f_data.0280 = phi ptr [ %8, %for.cond25.preheader.lr.ph ], [ %add.ptr158, %for.end144 ]
  %acc.0279 = phi i64 [ 0, %for.cond25.preheader.lr.ph ], [ %add157, %for.end144 ]
  %y.0278 = phi i32 [ 0, %for.cond25.preheader.lr.ph ], [ %inc160, %for.end144 ]
  br i1 %cmp26255, label %for.body27, label %for.cond128.preheader

for.cond.cleanup:                                 ; preds = %for.end144, %if.end16
  %acc.0.lcssa = phi i64 [ 0, %if.end16 ], [ %add157, %for.end144 ]
  %sub162 = add nsw i32 %shift, -1
  %shl = shl nuw i32 1, %sub162
  %conv163 = sext i32 %shl to i64
  %add164 = add nsw i64 %acc.0.lcssa, %conv163
  %sh_prom = zext nneg i32 %shift to i64
  %shr = ashr i64 %add164, %sh_prom
  %conv165 = trunc i64 %shr to i16
  store i16 %conv165, ptr %out_value, align 2, !tbaa !14
  br label %return

for.cond128.preheader:                            ; preds = %for.body27, %for.cond25.preheader
  %acc2.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add61, %for.body27 ]
  %acc3.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add74, %for.body27 ]
  %acc4.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add87, %for.body27 ]
  %acc5.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add100, %for.body27 ]
  %acc6.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add113, %for.body27 ]
  %acc7.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add126, %for.body27 ]
  %x.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %10, %for.body27 ]
  %acc1.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add48, %for.body27 ]
  %acc0.0.lcssa = phi i32 [ 0, %for.cond25.preheader ], [ %add, %for.body27 ]
  %cmp129273 = icmp slt i32 %x.0.lcssa, %count_x
  br i1 %cmp129273, label %for.body131, label %for.end144

for.body27:                                       ; preds = %for.cond25.preheader, %for.body27
  %acc0.0264 = phi i32 [ %add, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc1.0263 = phi i32 [ %add48, %for.body27 ], [ 0, %for.cond25.preheader ]
  %x.0262 = phi i32 [ %add127, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc7.0261 = phi i32 [ %add126, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc6.0260 = phi i32 [ %add113, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc5.0259 = phi i32 [ %add100, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc4.0258 = phi i32 [ %add87, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc3.0257 = phi i32 [ %add74, %for.body27 ], [ 0, %for.cond25.preheader ]
  %acc2.0256 = phi i32 [ %add61, %for.body27 ], [ 0, %for.cond25.preheader ]
  %mul29 = mul nsw i32 %x.0262, %0
  %arrayidx = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul29
  %11 = load i16, ptr %arrayidx, align 2, !tbaa !14
  %conv = sext i16 %11 to i32
  %mul31 = mul nsw i32 %x.0262, %4
  %arrayidx32 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul31
  %12 = load i16, ptr %arrayidx32, align 2, !tbaa !14
  %conv33 = sext i16 %12 to i32
  %mul34 = mul nsw i32 %conv33, %conv
  %add = add i32 %mul34, %acc0.0264
  %add37 = or disjoint i32 %x.0262, 1
  %mul38 = mul nsw i32 %add37, %0
  %arrayidx39 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul38
  %13 = load i16, ptr %arrayidx39, align 2, !tbaa !14
  %conv40 = sext i16 %13 to i32
  %mul43 = mul nsw i32 %add37, %4
  %arrayidx44 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul43
  %14 = load i16, ptr %arrayidx44, align 2, !tbaa !14
  %conv45 = sext i16 %14 to i32
  %mul46 = mul nsw i32 %conv45, %conv40
  %add48 = add i32 %mul46, %acc1.0263
  %add50 = or disjoint i32 %x.0262, 2
  %mul51 = mul nsw i32 %add50, %0
  %arrayidx52 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul51
  %15 = load i16, ptr %arrayidx52, align 2, !tbaa !14
  %conv53 = sext i16 %15 to i32
  %mul56 = mul nsw i32 %add50, %4
  %arrayidx57 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul56
  %16 = load i16, ptr %arrayidx57, align 2, !tbaa !14
  %conv58 = sext i16 %16 to i32
  %mul59 = mul nsw i32 %conv58, %conv53
  %add61 = add i32 %mul59, %acc2.0256
  %add63 = or disjoint i32 %x.0262, 3
  %mul64 = mul nsw i32 %add63, %0
  %arrayidx65 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul64
  %17 = load i16, ptr %arrayidx65, align 2, !tbaa !14
  %conv66 = sext i16 %17 to i32
  %mul69 = mul nsw i32 %add63, %4
  %arrayidx70 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul69
  %18 = load i16, ptr %arrayidx70, align 2, !tbaa !14
  %conv71 = sext i16 %18 to i32
  %mul72 = mul nsw i32 %conv71, %conv66
  %add74 = add i32 %mul72, %acc3.0257
  %add76 = or disjoint i32 %x.0262, 4
  %mul77 = mul nsw i32 %add76, %0
  %arrayidx78 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul77
  %19 = load i16, ptr %arrayidx78, align 2, !tbaa !14
  %conv79 = sext i16 %19 to i32
  %mul82 = mul nsw i32 %add76, %4
  %arrayidx83 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul82
  %20 = load i16, ptr %arrayidx83, align 2, !tbaa !14
  %conv84 = sext i16 %20 to i32
  %mul85 = mul nsw i32 %conv84, %conv79
  %add87 = add i32 %mul85, %acc4.0258
  %add89 = or disjoint i32 %x.0262, 5
  %mul90 = mul nsw i32 %add89, %0
  %arrayidx91 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul90
  %21 = load i16, ptr %arrayidx91, align 2, !tbaa !14
  %conv92 = sext i16 %21 to i32
  %mul95 = mul nsw i32 %add89, %4
  %arrayidx96 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul95
  %22 = load i16, ptr %arrayidx96, align 2, !tbaa !14
  %conv97 = sext i16 %22 to i32
  %mul98 = mul nsw i32 %conv97, %conv92
  %add100 = add i32 %mul98, %acc5.0259
  %add102 = or disjoint i32 %x.0262, 6
  %mul103 = mul nsw i32 %add102, %0
  %arrayidx104 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul103
  %23 = load i16, ptr %arrayidx104, align 2, !tbaa !14
  %conv105 = sext i16 %23 to i32
  %mul108 = mul nsw i32 %add102, %4
  %arrayidx109 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul108
  %24 = load i16, ptr %arrayidx109, align 2, !tbaa !14
  %conv110 = sext i16 %24 to i32
  %mul111 = mul nsw i32 %conv110, %conv105
  %add113 = add i32 %mul111, %acc6.0260
  %add115 = or disjoint i32 %x.0262, 7
  %mul116 = mul nsw i32 %add115, %0
  %arrayidx117 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul116
  %25 = load i16, ptr %arrayidx117, align 2, !tbaa !14
  %conv118 = sext i16 %25 to i32
  %mul121 = mul nsw i32 %add115, %4
  %arrayidx122 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul121
  %26 = load i16, ptr %arrayidx122, align 2, !tbaa !14
  %conv123 = sext i16 %26 to i32
  %mul124 = mul nsw i32 %conv123, %conv118
  %add126 = add i32 %mul124, %acc7.0261
  %add127 = add nuw nsw i32 %x.0262, 8
  %cmp26 = icmp slt i32 %add127, %sub
  br i1 %cmp26, label %for.body27, label %for.cond128.preheader, !llvm.loop !16

for.body131:                                      ; preds = %for.cond128.preheader, %for.body131
  %acc.1275 = phi i64 [ %add142, %for.body131 ], [ %acc.0279, %for.cond128.preheader ]
  %x.1274 = phi i32 [ %inc, %for.body131 ], [ %x.0.lcssa, %for.cond128.preheader ]
  %mul133 = mul nsw i32 %x.1274, %0
  %arrayidx134 = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul133
  %27 = load i16, ptr %arrayidx134, align 2, !tbaa !14
  %conv135 = sext i16 %27 to i32
  %mul137 = mul nsw i32 %x.1274, %4
  %arrayidx138 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul137
  %28 = load i16, ptr %arrayidx138, align 2, !tbaa !14
  %conv139 = sext i16 %28 to i32
  %mul140 = mul nsw i32 %conv139, %conv135
  %conv141 = sext i32 %mul140 to i64
  %add142 = add nsw i64 %acc.1275, %conv141
  %inc = add nuw nsw i32 %x.1274, 1
  %exitcond.not = icmp eq i32 %inc, %count_x
  br i1 %exitcond.not, label %for.end144, label %for.body131, !llvm.loop !18

for.end144:                                       ; preds = %for.body131, %for.cond128.preheader
  %acc.1.lcssa = phi i64 [ %acc.0279, %for.cond128.preheader ], [ %add142, %for.body131 ]
  %add145 = add i32 %acc3.0.lcssa, %acc2.0.lcssa
  %add147 = add i32 %add145, %acc4.0.lcssa
  %add153 = add i32 %add147, %acc5.0.lcssa
  %add151 = add i32 %add153, %acc6.0.lcssa
  %add149 = add i32 %add151, %acc7.0.lcssa
  %add154 = add i32 %add149, %acc1.0.lcssa
  %add155 = add i32 %add154, %acc0.0.lcssa
  %conv156 = sext i32 %add155 to i64
  %add157 = add nsw i64 %acc.1.lcssa, %conv156
  %add.ptr = getelementptr inbounds i16, ptr %i_data.0281, i32 %mul20
  %add.ptr158 = getelementptr inbounds i16, ptr %f_data.0280, i32 %mul23
  %inc160 = add nuw nsw i32 %y.0278, 1
  %exitcond283.not = icmp eq i32 %inc160, %count_y
  br i1 %exitcond283.not, label %for.cond.cleanup, label %for.cond25.preheader, !llvm.loop !19

return:                                           ; preds = %if.end10, %if.end4, %if.end, %entry, %for.cond.cleanup
  %retval.0 = phi i32 [ 0, %for.cond.cleanup ], [ 458755, %entry ], [ 458755, %if.end ], [ 458755, %if.end4 ], [ 458755, %if.end10 ]
  ret i32 %retval.0
}
