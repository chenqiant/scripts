; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=loopunrollandremainder -loopunrollandremainder=true -S | FileCheck %s
; ModuleID = 'after_splitloopbylength.ll'
source_filename = "dsps_conv_f32_ansi.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dsps_conv_f32_ansi(ptr noundef readonly %Signal, i32 noundef %siglen, ptr noundef readonly %Kernel, i32 noundef %kernlen, ptr noundef writeonly %convout) local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local noundef i32 @dsps_conv_f32_ansi(
; CHECK-SAME: ptr noalias noundef readonly [[SIGNAL:%.*]], i32 noundef [[SIGLEN:%.*]], ptr noalias noundef readonly [[KERNEL:%.*]], i32 noundef [[KERNLEN:%.*]], ptr noalias noundef writeonly [[CONVOUT:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[SIGNAL]], null
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq ptr [[KERNEL]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[CMP1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp eq ptr [[CONVOUT]], null
; CHECK-NEXT:    [[OR_COND118:%.*]] = or i1 [[OR_COND]], [[CMP4]]
; CHECK-NEXT:    br i1 [[OR_COND118]], label [[RETURN:%.*]], label [[IF_END6:%.*]]
; CHECK:       if.end6:
; CHECK-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[SIGLEN]], [[KERNLEN]]
; CHECK-NEXT:    br i1 [[CMP7]], label [[IF_THEN8:%.*]], label [[IF_END9:%.*]]
; CHECK:       if.then8:
; CHECK-NEXT:    br label [[IF_END9]]
; CHECK:       if.end9:
; CHECK-NEXT:    [[LKERN_0:%.*]] = phi i32 [ [[SIGLEN]], [[IF_THEN8]] ], [ [[KERNLEN]], [[IF_END6]] ]
; CHECK-NEXT:    [[LSIG_0:%.*]] = phi i32 [ [[KERNLEN]], [[IF_THEN8]] ], [ [[SIGLEN]], [[IF_END6]] ]
; CHECK-NEXT:    [[KERN_0:%.*]] = phi ptr [ [[SIGNAL]], [[IF_THEN8]] ], [ [[KERNEL]], [[IF_END6]] ]
; CHECK-NEXT:    [[SIG_0:%.*]] = phi ptr [ [[KERNEL]], [[IF_THEN8]] ], [ [[SIGNAL]], [[IF_END6]] ]
; CHECK-NEXT:    [[CMP10120:%.*]] = icmp sgt i32 [[LKERN_0]], 0
; CHECK-NEXT:    br i1 [[CMP10120]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND21_PREHEADER:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond21.preheader.loopexit:
; CHECK-NEXT:    br label [[FOR_COND21_PREHEADER]]
; CHECK:       for.cond21.preheader:
; CHECK-NEXT:    [[CMP22125:%.*]] = icmp slt i32 [[LKERN_0]], [[LSIG_0]]
; CHECK-NEXT:    br i1 [[CMP22125]], label [[FOR_BODY24_PREHEADER:%.*]], label [[FOR_COND42_PREHEADER:%.*]]
; CHECK:       for.body24.preheader:
; CHECK-NEXT:    [[DIV536:%.*]] = and i32 [[LKERN_0]], -16
; CHECK-NEXT:    br label [[FOR_BODY24:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i32 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_END:%.*]] ], [ 1, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[N_0121:%.*]] = phi i32 [ [[INC18:%.*]], [[FOR_END]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[N_0121]], 2147483644
; CHECK-NEXT:    [[TMP1:%.*]] = add nsw i32 [[TMP0]], -1
; CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[TMP1]], -4
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 4
; CHECK-NEXT:    [[TMP4:%.*]] = and i32 [[N_0121]], 2147483644
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[CONVOUT]], i32 [[N_0121]]
; CHECK-NEXT:    br i1 [[TMP5]], label [[FOR_BODY13_CLONE_PREHEADER:%.*]], label [[FOR_BODY13_3:%.*]]
; CHECK:       for.body13.3:
; CHECK-NEXT:    [[K_0119:%.*]] = phi i32 [ 0, [[FOR_BODY]] ], [ [[INC_3:%.*]], [[FOR_BODY13_3]] ]
; CHECK-NEXT:    [[DOTPHI:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP8:%.*]], [[FOR_BODY13_3]] ]
; CHECK-NEXT:    [[DOTPHI1:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP11:%.*]], [[FOR_BODY13_3]] ]
; CHECK-NEXT:    [[DOTPHI2:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP14:%.*]], [[FOR_BODY13_3]] ]
; CHECK-NEXT:    [[DOTPHI3:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP17:%.*]], [[FOR_BODY13_3]] ]
; CHECK-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K_0119]]
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX14]], align 4, !tbaa [[TBAA4:![0-9]+]]
; CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[N_0121]], [[K_0119]]
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB]]
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr [[ARRAYIDX15]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP8]] = tail call float @llvm.fmuladd.f32(float [[TMP6]], float [[TMP7]], float [[DOTPHI]])
; CHECK-NEXT:    [[ADD:%.*]] = or disjoint i32 [[K_0119]], 1
; CHECK-NEXT:    [[ARRAYIDX14_1:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[ADD]]
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX14_1]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB_1:%.*]] = sub nsw i32 [[N_0121]], [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX15_1:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB_1]]
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX15_1]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP11]] = tail call float @llvm.fmuladd.f32(float [[TMP9]], float [[TMP10]], float [[DOTPHI1]])
; CHECK-NEXT:    [[ADD5:%.*]] = or disjoint i32 [[K_0119]], 2
; CHECK-NEXT:    [[ARRAYIDX14_2:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[ADD5]]
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[ARRAYIDX14_2]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB_2:%.*]] = sub nsw i32 [[N_0121]], [[ADD5]]
; CHECK-NEXT:    [[ARRAYIDX15_2:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB_2]]
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[ARRAYIDX15_2]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP14]] = tail call float @llvm.fmuladd.f32(float [[TMP12]], float [[TMP13]], float [[DOTPHI2]])
; CHECK-NEXT:    [[ADD7:%.*]] = or disjoint i32 [[K_0119]], 3
; CHECK-NEXT:    [[ARRAYIDX14_3:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[ADD7]]
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[ARRAYIDX14_3]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB_3:%.*]] = sub nsw i32 [[N_0121]], [[ADD7]]
; CHECK-NEXT:    [[ARRAYIDX15_3:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB_3]]
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[ARRAYIDX15_3]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP17]] = tail call float @llvm.fmuladd.f32(float [[TMP15]], float [[TMP16]], float [[DOTPHI3]])
; CHECK-NEXT:    [[INC_3]] = add nuw nsw i32 [[K_0119]], 4
; CHECK-NEXT:    [[EXITCOND_3:%.*]] = icmp ult i32 [[INC_3]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND_3]], label [[FOR_BODY13_3]], label [[FOR_END8:%.*]], !llvm.loop [[LOOP8:![0-9]+]]
; CHECK:       for.end8:
; CHECK-NEXT:    [[SUM:%.*]] = fadd float [[TMP8]], [[TMP11]]
; CHECK-NEXT:    [[SUM9:%.*]] = fadd float [[SUM]], [[TMP14]]
; CHECK-NEXT:    [[SUM10:%.*]] = fadd float [[SUM9]], [[TMP17]]
; CHECK-NEXT:    store float [[SUM10]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[CMP37_NOT548:%.*]] = icmp ugt i32 [[TMP3]], [[N_0121]]
; CHECK-NEXT:    br i1 [[CMP37_NOT548]], label [[FOR_END]], label [[FOR_BODY13_CLONE_PREHEADER]]
; CHECK:       for.body13.clone.preheader:
; CHECK-NEXT:    [[SUM_PHI:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[SUM10]], [[FOR_END8]] ]
; CHECK-NEXT:    [[ADD_PHI:%.*]] = phi i32 [ 0, [[FOR_BODY]] ], [ [[TMP3]], [[FOR_END8]] ]
; CHECK-NEXT:    br label [[FOR_BODY13_CLONE:%.*]]
; CHECK:       for.body13.clone:
; CHECK-NEXT:    [[K_0119_CLONE:%.*]] = phi i32 [ [[ADD_PHI]], [[FOR_BODY13_CLONE_PREHEADER]] ], [ [[INC_CLONE:%.*]], [[FOR_BODY13_CLONE]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi float [ [[SUM_PHI]], [[FOR_BODY13_CLONE_PREHEADER]] ], [ [[TMP21:%.*]], [[FOR_BODY13_CLONE]] ]
; CHECK-NEXT:    [[ARRAYIDX14_CLONE:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K_0119_CLONE]]
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[ARRAYIDX14_CLONE]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB_CLONE:%.*]] = sub nsw i32 [[N_0121]], [[K_0119_CLONE]]
; CHECK-NEXT:    [[ARRAYIDX15_CLONE:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB_CLONE]]
; CHECK-NEXT:    [[TMP20:%.*]] = load float, ptr [[ARRAYIDX15_CLONE]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP21]] = tail call float @llvm.fmuladd.f32(float [[TMP19]], float [[TMP20]], float [[TMP18]])
; CHECK-NEXT:    [[INC_CLONE]] = add nuw nsw i32 [[K_0119_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND_CLONE:%.*]] = icmp eq i32 [[INC_CLONE]], [[INDVARS_IV]]
; CHECK-NEXT:    br i1 [[EXITCOND_CLONE]], label [[FOR_COND_FOR_END_CRIT_EDGE:%.*]], label [[FOR_BODY13_CLONE]], !llvm.loop [[LOOP8]]
; CHECK:       for.cond.for.end_crit_edge:
; CHECK-NEXT:    store float [[TMP21]], ptr [[ARRAYIDX]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    [[INC18]] = add nuw nsw i32 [[N_0121]], 1
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw i32 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND132_NOT:%.*]] = icmp eq i32 [[INC18]], [[LKERN_0]]
; CHECK-NEXT:    br i1 [[EXITCOND132_NOT]], label [[FOR_COND21_PREHEADER_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP10:![0-9]+]]
; CHECK:       for.cond42.preheader.loopexit:
; CHECK-NEXT:    br label [[FOR_COND42_PREHEADER]]
; CHECK:       for.cond42.preheader:
; CHECK-NEXT:    [[ADD43:%.*]] = add i32 [[SIGLEN]], -1
; CHECK-NEXT:    [[SUB44:%.*]] = add i32 [[ADD43]], [[KERNLEN]]
; CHECK-NEXT:    [[CMP45130:%.*]] = icmp slt i32 [[LSIG_0]], [[SUB44]]
; CHECK-NEXT:    br i1 [[CMP45130]], label [[FOR_BODY47_LR_PH:%.*]], label [[RETURN]]
; CHECK:       for.body47.lr.ph:
; CHECK-NEXT:    [[SUB54:%.*]] = add nsw i32 [[LSIG_0]], -1
; CHECK-NEXT:    br label [[FOR_BODY47:%.*]]
; CHECK:       for.body24:
; CHECK-NEXT:    [[N20_0126:%.*]] = phi i32 [ [[INC39:%.*]], [[FOR_END37:%.*]] ], [ [[LKERN_0]], [[FOR_BODY24_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds float, ptr [[CONVOUT]], i32 [[N20_0126]]
; CHECK-NEXT:    [[SUB27:%.*]] = sub nuw nsw i32 [[N20_0126]], [[LKERN_0]]
; CHECK-NEXT:    [[K25_0122:%.*]] = add i32 [[SUB27]], 1
; CHECK-NEXT:    [[ADD60:%.*]] = add i32 [[DIV536]], [[K25_0122]]
; CHECK-NEXT:    [[CMP29_NOT123:%.*]] = icmp ult i32 [[K25_0122]], [[ADD60]]
; CHECK-NEXT:    br i1 [[CMP29_NOT123]], label [[FOR_BODY30_PREHEADER:%.*]], label [[FOR_END164:%.*]]
; CHECK:       for.body30.preheader:
; CHECK-NEXT:    br label [[FOR_BODY30_15:%.*]]
; CHECK:       for.body30.15:
; CHECK-NEXT:    [[K25_0124:%.*]] = phi i32 [ [[K25_0122]], [[FOR_BODY30_PREHEADER]] ], [ [[K25_0_15:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI11:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP24:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI12:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP27:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI13:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP30:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI14:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP33:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI15:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP36:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI16:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP39:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI17:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP42:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI18:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP45:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI19:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP48:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI20:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP51:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI21:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP54:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI22:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP57:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI23:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP60:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI24:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP63:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI25:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP66:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[DOTPHI26:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY30_PREHEADER]] ], [ [[TMP69:%.*]], [[FOR_BODY30_15]] ]
; CHECK-NEXT:    [[ARRAYIDX31:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0124]]
; CHECK-NEXT:    [[TMP22:%.*]] = load float, ptr [[ARRAYIDX31]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32:%.*]] = sub i32 [[N20_0126]], [[K25_0124]]
; CHECK-NEXT:    [[ARRAYIDX33:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32]]
; CHECK-NEXT:    [[TMP23:%.*]] = load float, ptr [[ARRAYIDX33]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP24]] = tail call float @llvm.fmuladd.f32(float [[TMP22]], float [[TMP23]], float [[DOTPHI11]])
; CHECK-NEXT:    [[K25_0:%.*]] = add i32 [[K25_0124]], 1
; CHECK-NEXT:    [[ARRAYIDX31_1:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0]]
; CHECK-NEXT:    [[TMP25:%.*]] = load float, ptr [[ARRAYIDX31_1]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_1:%.*]] = sub i32 [[N20_0126]], [[K25_0]]
; CHECK-NEXT:    [[ARRAYIDX33_1:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_1]]
; CHECK-NEXT:    [[TMP26:%.*]] = load float, ptr [[ARRAYIDX33_1]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP27]] = tail call float @llvm.fmuladd.f32(float [[TMP25]], float [[TMP26]], float [[DOTPHI12]])
; CHECK-NEXT:    [[K25_0_1:%.*]] = add i32 [[K25_0124]], 2
; CHECK-NEXT:    [[ARRAYIDX31_2:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_1]]
; CHECK-NEXT:    [[TMP28:%.*]] = load float, ptr [[ARRAYIDX31_2]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_2:%.*]] = sub i32 [[N20_0126]], [[K25_0_1]]
; CHECK-NEXT:    [[ARRAYIDX33_2:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_2]]
; CHECK-NEXT:    [[TMP29:%.*]] = load float, ptr [[ARRAYIDX33_2]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP30]] = tail call float @llvm.fmuladd.f32(float [[TMP28]], float [[TMP29]], float [[DOTPHI13]])
; CHECK-NEXT:    [[K25_0_2:%.*]] = add i32 [[K25_0124]], 3
; CHECK-NEXT:    [[ARRAYIDX31_3:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_2]]
; CHECK-NEXT:    [[TMP31:%.*]] = load float, ptr [[ARRAYIDX31_3]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_3:%.*]] = sub i32 [[N20_0126]], [[K25_0_2]]
; CHECK-NEXT:    [[ARRAYIDX33_3:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_3]]
; CHECK-NEXT:    [[TMP32:%.*]] = load float, ptr [[ARRAYIDX33_3]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP33]] = tail call float @llvm.fmuladd.f32(float [[TMP31]], float [[TMP32]], float [[DOTPHI14]])
; CHECK-NEXT:    [[K25_0_3:%.*]] = add i32 [[K25_0124]], 4
; CHECK-NEXT:    [[ARRAYIDX31_4:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_3]]
; CHECK-NEXT:    [[TMP34:%.*]] = load float, ptr [[ARRAYIDX31_4]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_4:%.*]] = sub i32 [[N20_0126]], [[K25_0_3]]
; CHECK-NEXT:    [[ARRAYIDX33_4:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_4]]
; CHECK-NEXT:    [[TMP35:%.*]] = load float, ptr [[ARRAYIDX33_4]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP36]] = tail call float @llvm.fmuladd.f32(float [[TMP34]], float [[TMP35]], float [[DOTPHI15]])
; CHECK-NEXT:    [[K25_0_4:%.*]] = add i32 [[K25_0124]], 5
; CHECK-NEXT:    [[ARRAYIDX31_5:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_4]]
; CHECK-NEXT:    [[TMP37:%.*]] = load float, ptr [[ARRAYIDX31_5]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_5:%.*]] = sub i32 [[N20_0126]], [[K25_0_4]]
; CHECK-NEXT:    [[ARRAYIDX33_5:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_5]]
; CHECK-NEXT:    [[TMP38:%.*]] = load float, ptr [[ARRAYIDX33_5]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP39]] = tail call float @llvm.fmuladd.f32(float [[TMP37]], float [[TMP38]], float [[DOTPHI16]])
; CHECK-NEXT:    [[K25_0_5:%.*]] = add i32 [[K25_0124]], 6
; CHECK-NEXT:    [[ARRAYIDX31_6:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_5]]
; CHECK-NEXT:    [[TMP40:%.*]] = load float, ptr [[ARRAYIDX31_6]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_6:%.*]] = sub i32 [[N20_0126]], [[K25_0_5]]
; CHECK-NEXT:    [[ARRAYIDX33_6:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_6]]
; CHECK-NEXT:    [[TMP41:%.*]] = load float, ptr [[ARRAYIDX33_6]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP42]] = tail call float @llvm.fmuladd.f32(float [[TMP40]], float [[TMP41]], float [[DOTPHI17]])
; CHECK-NEXT:    [[K25_0_6:%.*]] = add i32 [[K25_0124]], 7
; CHECK-NEXT:    [[ARRAYIDX31_7:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_6]]
; CHECK-NEXT:    [[TMP43:%.*]] = load float, ptr [[ARRAYIDX31_7]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_7:%.*]] = sub i32 [[N20_0126]], [[K25_0_6]]
; CHECK-NEXT:    [[ARRAYIDX33_7:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_7]]
; CHECK-NEXT:    [[TMP44:%.*]] = load float, ptr [[ARRAYIDX33_7]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP45]] = tail call float @llvm.fmuladd.f32(float [[TMP43]], float [[TMP44]], float [[DOTPHI18]])
; CHECK-NEXT:    [[K25_0_7:%.*]] = add i32 [[K25_0124]], 8
; CHECK-NEXT:    [[ARRAYIDX31_8:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_7]]
; CHECK-NEXT:    [[TMP46:%.*]] = load float, ptr [[ARRAYIDX31_8]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_8:%.*]] = sub i32 [[N20_0126]], [[K25_0_7]]
; CHECK-NEXT:    [[ARRAYIDX33_8:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_8]]
; CHECK-NEXT:    [[TMP47:%.*]] = load float, ptr [[ARRAYIDX33_8]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP48]] = tail call float @llvm.fmuladd.f32(float [[TMP46]], float [[TMP47]], float [[DOTPHI19]])
; CHECK-NEXT:    [[K25_0_8:%.*]] = add i32 [[K25_0124]], 9
; CHECK-NEXT:    [[ARRAYIDX31_9:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_8]]
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX31_9]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_9:%.*]] = sub i32 [[N20_0126]], [[K25_0_8]]
; CHECK-NEXT:    [[ARRAYIDX33_9:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_9]]
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX33_9]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP51]] = tail call float @llvm.fmuladd.f32(float [[TMP49]], float [[TMP50]], float [[DOTPHI20]])
; CHECK-NEXT:    [[K25_0_9:%.*]] = add i32 [[K25_0124]], 10
; CHECK-NEXT:    [[ARRAYIDX31_10:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_9]]
; CHECK-NEXT:    [[TMP52:%.*]] = load float, ptr [[ARRAYIDX31_10]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_10:%.*]] = sub i32 [[N20_0126]], [[K25_0_9]]
; CHECK-NEXT:    [[ARRAYIDX33_10:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_10]]
; CHECK-NEXT:    [[TMP53:%.*]] = load float, ptr [[ARRAYIDX33_10]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP54]] = tail call float @llvm.fmuladd.f32(float [[TMP52]], float [[TMP53]], float [[DOTPHI21]])
; CHECK-NEXT:    [[K25_0_10:%.*]] = add i32 [[K25_0124]], 11
; CHECK-NEXT:    [[ARRAYIDX31_11:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_10]]
; CHECK-NEXT:    [[TMP55:%.*]] = load float, ptr [[ARRAYIDX31_11]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_11:%.*]] = sub i32 [[N20_0126]], [[K25_0_10]]
; CHECK-NEXT:    [[ARRAYIDX33_11:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_11]]
; CHECK-NEXT:    [[TMP56:%.*]] = load float, ptr [[ARRAYIDX33_11]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP57]] = tail call float @llvm.fmuladd.f32(float [[TMP55]], float [[TMP56]], float [[DOTPHI22]])
; CHECK-NEXT:    [[K25_0_11:%.*]] = add i32 [[K25_0124]], 12
; CHECK-NEXT:    [[ARRAYIDX31_12:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_11]]
; CHECK-NEXT:    [[TMP58:%.*]] = load float, ptr [[ARRAYIDX31_12]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_12:%.*]] = sub i32 [[N20_0126]], [[K25_0_11]]
; CHECK-NEXT:    [[ARRAYIDX33_12:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_12]]
; CHECK-NEXT:    [[TMP59:%.*]] = load float, ptr [[ARRAYIDX33_12]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP60]] = tail call float @llvm.fmuladd.f32(float [[TMP58]], float [[TMP59]], float [[DOTPHI23]])
; CHECK-NEXT:    [[K25_0_12:%.*]] = add i32 [[K25_0124]], 13
; CHECK-NEXT:    [[ARRAYIDX31_13:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_12]]
; CHECK-NEXT:    [[TMP61:%.*]] = load float, ptr [[ARRAYIDX31_13]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_13:%.*]] = sub i32 [[N20_0126]], [[K25_0_12]]
; CHECK-NEXT:    [[ARRAYIDX33_13:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_13]]
; CHECK-NEXT:    [[TMP62:%.*]] = load float, ptr [[ARRAYIDX33_13]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP63]] = tail call float @llvm.fmuladd.f32(float [[TMP61]], float [[TMP62]], float [[DOTPHI24]])
; CHECK-NEXT:    [[K25_0_13:%.*]] = add i32 [[K25_0124]], 14
; CHECK-NEXT:    [[ARRAYIDX31_14:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_13]]
; CHECK-NEXT:    [[TMP64:%.*]] = load float, ptr [[ARRAYIDX31_14]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_14:%.*]] = sub i32 [[N20_0126]], [[K25_0_13]]
; CHECK-NEXT:    [[ARRAYIDX33_14:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_14]]
; CHECK-NEXT:    [[TMP65:%.*]] = load float, ptr [[ARRAYIDX33_14]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP66]] = tail call float @llvm.fmuladd.f32(float [[TMP64]], float [[TMP65]], float [[DOTPHI25]])
; CHECK-NEXT:    [[K25_0_14:%.*]] = add i32 [[K25_0124]], 15
; CHECK-NEXT:    [[ARRAYIDX31_15:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0_14]]
; CHECK-NEXT:    [[TMP67:%.*]] = load float, ptr [[ARRAYIDX31_15]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_15:%.*]] = sub i32 [[N20_0126]], [[K25_0_14]]
; CHECK-NEXT:    [[ARRAYIDX33_15:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_15]]
; CHECK-NEXT:    [[TMP68:%.*]] = load float, ptr [[ARRAYIDX33_15]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP69]] = tail call float @llvm.fmuladd.f32(float [[TMP67]], float [[TMP68]], float [[DOTPHI26]])
; CHECK-NEXT:    [[K25_0_15]] = add i32 [[K25_0124]], 16
; CHECK-NEXT:    [[CMP29_NOT_15:%.*]] = icmp ult i32 [[K25_0_15]], [[ADD60]]
; CHECK-NEXT:    br i1 [[CMP29_NOT_15]], label [[FOR_BODY30_15]], label [[FOR_END37_LOOPEXIT:%.*]], !llvm.loop [[LOOP11:![0-9]+]]
; CHECK:       for.end37.loopexit:
; CHECK-NEXT:    [[SUM27:%.*]] = fadd float [[TMP24]], [[TMP27]]
; CHECK-NEXT:    [[SUM28:%.*]] = fadd float [[SUM27]], [[TMP30]]
; CHECK-NEXT:    [[SUM29:%.*]] = fadd float [[SUM28]], [[TMP33]]
; CHECK-NEXT:    [[SUM30:%.*]] = fadd float [[SUM29]], [[TMP36]]
; CHECK-NEXT:    [[SUM31:%.*]] = fadd float [[SUM30]], [[TMP39]]
; CHECK-NEXT:    [[SUM32:%.*]] = fadd float [[SUM31]], [[TMP42]]
; CHECK-NEXT:    [[SUM33:%.*]] = fadd float [[SUM32]], [[TMP45]]
; CHECK-NEXT:    [[SUM34:%.*]] = fadd float [[SUM33]], [[TMP48]]
; CHECK-NEXT:    [[SUM35:%.*]] = fadd float [[SUM34]], [[TMP51]]
; CHECK-NEXT:    [[SUM36:%.*]] = fadd float [[SUM35]], [[TMP54]]
; CHECK-NEXT:    [[SUM37:%.*]] = fadd float [[SUM36]], [[TMP57]]
; CHECK-NEXT:    [[SUM38:%.*]] = fadd float [[SUM37]], [[TMP60]]
; CHECK-NEXT:    [[SUM39:%.*]] = fadd float [[SUM38]], [[TMP63]]
; CHECK-NEXT:    [[SUM40:%.*]] = fadd float [[SUM39]], [[TMP66]]
; CHECK-NEXT:    [[SUM41:%.*]] = fadd float [[SUM40]], [[TMP69]]
; CHECK-NEXT:    br label [[FOR_END164]]
; CHECK:       for.end164:
; CHECK-NEXT:    [[PHI_SUM:%.*]] = phi i32 [ [[K25_0122]], [[FOR_BODY24]] ], [ [[K25_0_15]], [[FOR_END37_LOOPEXIT]] ]
; CHECK-NEXT:    [[PHI_FLOAT:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY24]] ], [ [[SUM41]], [[FOR_END37_LOOPEXIT]] ]
; CHECK-NEXT:    store float [[PHI_FLOAT]], ptr [[ARRAYIDX26]], align 4
; CHECK-NEXT:    [[CMP182_NOT587:%.*]] = icmp ugt i32 [[PHI_SUM]], [[N20_0126]]
; CHECK-NEXT:    br i1 [[CMP182_NOT587]], label [[FOR_END37]], label [[FOR_BODY30_CLONE:%.*]]
; CHECK:       for.body30.clone:
; CHECK-NEXT:    [[TMP70:%.*]] = phi float [ [[TMP73:%.*]], [[FOR_BODY30_CLONE]] ], [ [[PHI_FLOAT]], [[FOR_END164]] ]
; CHECK-NEXT:    [[K25_0124_CLONE:%.*]] = phi i32 [ [[K25_0_CLONE:%.*]], [[FOR_BODY30_CLONE]] ], [ [[PHI_SUM]], [[FOR_END164]] ]
; CHECK-NEXT:    [[ARRAYIDX31_CLONE:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K25_0124_CLONE]]
; CHECK-NEXT:    [[TMP71:%.*]] = load float, ptr [[ARRAYIDX31_CLONE]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB32_CLONE:%.*]] = sub i32 [[N20_0126]], [[K25_0124_CLONE]]
; CHECK-NEXT:    [[ARRAYIDX33_CLONE:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB32_CLONE]]
; CHECK-NEXT:    [[TMP72:%.*]] = load float, ptr [[ARRAYIDX33_CLONE]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP73]] = tail call float @llvm.fmuladd.f32(float [[TMP71]], float [[TMP72]], float [[TMP70]])
; CHECK-NEXT:    [[K25_0_CLONE]] = add i32 [[K25_0124_CLONE]], 1
; CHECK-NEXT:    [[CMP29_NOT_CLONE:%.*]] = icmp ugt i32 [[K25_0_CLONE]], [[N20_0126]]
; CHECK-NEXT:    br i1 [[CMP29_NOT_CLONE]], label [[FOR_COND_FOR_END_CRIT_EDGE42:%.*]], label [[FOR_BODY30_CLONE]], !llvm.loop [[LOOP11]]
; CHECK:       for.cond.for.end_crit_edge42:
; CHECK-NEXT:    store float [[TMP73]], ptr [[ARRAYIDX26]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    br label [[FOR_END37]]
; CHECK:       for.end37:
; CHECK-NEXT:    [[INC39]] = add nuw nsw i32 [[N20_0126]], 1
; CHECK-NEXT:    [[EXITCOND133_NOT:%.*]] = icmp eq i32 [[INC39]], [[LSIG_0]]
; CHECK-NEXT:    br i1 [[EXITCOND133_NOT]], label [[FOR_COND42_PREHEADER_LOOPEXIT:%.*]], label [[FOR_BODY24]], !llvm.loop [[LOOP12:![0-9]+]]
; CHECK:       for.body47:
; CHECK-NEXT:    [[N41_0131:%.*]] = phi i32 [ [[LSIG_0]], [[FOR_BODY47_LR_PH]] ], [ [[INC66:%.*]], [[FOR_END64:%.*]] ]
; CHECK-NEXT:    [[ARRAYIDX51:%.*]] = getelementptr inbounds float, ptr [[CONVOUT]], i32 [[N41_0131]]
; CHECK-NEXT:    [[SUB52:%.*]] = sub nsw i32 [[N41_0131]], [[LKERN_0]]
; CHECK-NEXT:    [[K50_0127:%.*]] = add i32 [[SUB52]], 1
; CHECK-NEXT:    [[ADD207_NEG:%.*]] = xor i32 [[SUB52]], -1
; CHECK-NEXT:    [[ADD211:%.*]] = add i32 [[LSIG_0]], [[ADD207_NEG]]
; CHECK-NEXT:    [[DIV212535:%.*]] = and i32 [[ADD211]], -8
; CHECK-NEXT:    [[ADD214:%.*]] = add i32 [[DIV212535]], [[K50_0127]]
; CHECK-NEXT:    [[CMP56_NOT128:%.*]] = icmp ult i32 [[K50_0127]], [[ADD214]]
; CHECK-NEXT:    br i1 [[CMP56_NOT128]], label [[FOR_BODY57_PREHEADER:%.*]], label [[FOR_END274:%.*]]
; CHECK:       for.body57.preheader:
; CHECK-NEXT:    br label [[FOR_BODY57_7:%.*]]
; CHECK:       for.body57.7:
; CHECK-NEXT:    [[K50_0129:%.*]] = phi i32 [ [[K50_0127]], [[FOR_BODY57_PREHEADER]] ], [ [[K50_0_7:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI43:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP76:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI44:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP79:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI45:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP82:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI46:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP85:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI47:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP88:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI48:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP91:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI49:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP94:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[DOTPHI50:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57_PREHEADER]] ], [ [[TMP97:%.*]], [[FOR_BODY57_7]] ]
; CHECK-NEXT:    [[ARRAYIDX58:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0129]]
; CHECK-NEXT:    [[TMP74:%.*]] = load float, ptr [[ARRAYIDX58]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59:%.*]] = sub i32 [[N41_0131]], [[K50_0129]]
; CHECK-NEXT:    [[ARRAYIDX60:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59]]
; CHECK-NEXT:    [[TMP75:%.*]] = load float, ptr [[ARRAYIDX60]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP76]] = tail call float @llvm.fmuladd.f32(float [[TMP74]], float [[TMP75]], float [[DOTPHI43]])
; CHECK-NEXT:    [[K50_0:%.*]] = add i32 [[K50_0129]], 1
; CHECK-NEXT:    [[ARRAYIDX58_1:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0]]
; CHECK-NEXT:    [[TMP77:%.*]] = load float, ptr [[ARRAYIDX58_1]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_1:%.*]] = sub i32 [[N41_0131]], [[K50_0]]
; CHECK-NEXT:    [[ARRAYIDX60_1:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_1]]
; CHECK-NEXT:    [[TMP78:%.*]] = load float, ptr [[ARRAYIDX60_1]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP79]] = tail call float @llvm.fmuladd.f32(float [[TMP77]], float [[TMP78]], float [[DOTPHI44]])
; CHECK-NEXT:    [[K50_0_1:%.*]] = add i32 [[K50_0129]], 2
; CHECK-NEXT:    [[ARRAYIDX58_2:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0_1]]
; CHECK-NEXT:    [[TMP80:%.*]] = load float, ptr [[ARRAYIDX58_2]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_2:%.*]] = sub i32 [[N41_0131]], [[K50_0_1]]
; CHECK-NEXT:    [[ARRAYIDX60_2:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_2]]
; CHECK-NEXT:    [[TMP81:%.*]] = load float, ptr [[ARRAYIDX60_2]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP82]] = tail call float @llvm.fmuladd.f32(float [[TMP80]], float [[TMP81]], float [[DOTPHI45]])
; CHECK-NEXT:    [[K50_0_2:%.*]] = add i32 [[K50_0129]], 3
; CHECK-NEXT:    [[ARRAYIDX58_3:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0_2]]
; CHECK-NEXT:    [[TMP83:%.*]] = load float, ptr [[ARRAYIDX58_3]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_3:%.*]] = sub i32 [[N41_0131]], [[K50_0_2]]
; CHECK-NEXT:    [[ARRAYIDX60_3:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_3]]
; CHECK-NEXT:    [[TMP84:%.*]] = load float, ptr [[ARRAYIDX60_3]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP85]] = tail call float @llvm.fmuladd.f32(float [[TMP83]], float [[TMP84]], float [[DOTPHI46]])
; CHECK-NEXT:    [[K50_0_3:%.*]] = add i32 [[K50_0129]], 4
; CHECK-NEXT:    [[ARRAYIDX58_4:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0_3]]
; CHECK-NEXT:    [[TMP86:%.*]] = load float, ptr [[ARRAYIDX58_4]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_4:%.*]] = sub i32 [[N41_0131]], [[K50_0_3]]
; CHECK-NEXT:    [[ARRAYIDX60_4:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_4]]
; CHECK-NEXT:    [[TMP87:%.*]] = load float, ptr [[ARRAYIDX60_4]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP88]] = tail call float @llvm.fmuladd.f32(float [[TMP86]], float [[TMP87]], float [[DOTPHI47]])
; CHECK-NEXT:    [[K50_0_4:%.*]] = add i32 [[K50_0129]], 5
; CHECK-NEXT:    [[ARRAYIDX58_5:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0_4]]
; CHECK-NEXT:    [[TMP89:%.*]] = load float, ptr [[ARRAYIDX58_5]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_5:%.*]] = sub i32 [[N41_0131]], [[K50_0_4]]
; CHECK-NEXT:    [[ARRAYIDX60_5:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_5]]
; CHECK-NEXT:    [[TMP90:%.*]] = load float, ptr [[ARRAYIDX60_5]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP91]] = tail call float @llvm.fmuladd.f32(float [[TMP89]], float [[TMP90]], float [[DOTPHI48]])
; CHECK-NEXT:    [[K50_0_5:%.*]] = add i32 [[K50_0129]], 6
; CHECK-NEXT:    [[ARRAYIDX58_6:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0_5]]
; CHECK-NEXT:    [[TMP92:%.*]] = load float, ptr [[ARRAYIDX58_6]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_6:%.*]] = sub i32 [[N41_0131]], [[K50_0_5]]
; CHECK-NEXT:    [[ARRAYIDX60_6:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_6]]
; CHECK-NEXT:    [[TMP93:%.*]] = load float, ptr [[ARRAYIDX60_6]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP94]] = tail call float @llvm.fmuladd.f32(float [[TMP92]], float [[TMP93]], float [[DOTPHI49]])
; CHECK-NEXT:    [[K50_0_6:%.*]] = add i32 [[K50_0129]], 7
; CHECK-NEXT:    [[ARRAYIDX58_7:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0_6]]
; CHECK-NEXT:    [[TMP95:%.*]] = load float, ptr [[ARRAYIDX58_7]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_7:%.*]] = sub i32 [[N41_0131]], [[K50_0_6]]
; CHECK-NEXT:    [[ARRAYIDX60_7:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_7]]
; CHECK-NEXT:    [[TMP96:%.*]] = load float, ptr [[ARRAYIDX60_7]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP97]] = tail call float @llvm.fmuladd.f32(float [[TMP95]], float [[TMP96]], float [[DOTPHI50]])
; CHECK-NEXT:    [[K50_0_7]] = add i32 [[K50_0129]], 8
; CHECK-NEXT:    [[CMP56_NOT_7:%.*]] = icmp ult i32 [[K50_0_7]], [[ADD214]]
; CHECK-NEXT:    br i1 [[CMP56_NOT_7]], label [[FOR_BODY57_7]], label [[FOR_END64_LOOPEXIT:%.*]], !llvm.loop [[LOOP13:![0-9]+]]
; CHECK:       for.end64.loopexit:
; CHECK-NEXT:    [[SUM51:%.*]] = fadd float [[TMP76]], [[TMP79]]
; CHECK-NEXT:    [[SUM52:%.*]] = fadd float [[SUM51]], [[TMP82]]
; CHECK-NEXT:    [[SUM53:%.*]] = fadd float [[SUM52]], [[TMP85]]
; CHECK-NEXT:    [[SUM54:%.*]] = fadd float [[SUM53]], [[TMP88]]
; CHECK-NEXT:    [[SUM55:%.*]] = fadd float [[SUM54]], [[TMP91]]
; CHECK-NEXT:    [[SUM56:%.*]] = fadd float [[SUM55]], [[TMP94]]
; CHECK-NEXT:    [[SUM57:%.*]] = fadd float [[SUM56]], [[TMP97]]
; CHECK-NEXT:    br label [[FOR_END274]]
; CHECK:       for.end274:
; CHECK-NEXT:    [[PHI_SUM58:%.*]] = phi i32 [ [[K50_0127]], [[FOR_BODY47]] ], [ [[K50_0_7]], [[FOR_END64_LOOPEXIT]] ]
; CHECK-NEXT:    [[PHI_FLOAT59:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY47]] ], [ [[SUM57]], [[FOR_END64_LOOPEXIT]] ]
; CHECK-NEXT:    store float [[PHI_FLOAT59]], ptr [[ARRAYIDX51]], align 4
; CHECK-NEXT:    [[CMP182_NOT58760:%.*]] = icmp ugt i32 [[PHI_SUM58]], [[SUB54]]
; CHECK-NEXT:    br i1 [[CMP182_NOT58760]], label [[FOR_END64]], label [[FOR_BODY57_CLONE:%.*]]
; CHECK:       for.body57.clone:
; CHECK-NEXT:    [[TMP98:%.*]] = phi float [ [[TMP101:%.*]], [[FOR_BODY57_CLONE]] ], [ [[PHI_FLOAT59]], [[FOR_END274]] ]
; CHECK-NEXT:    [[K50_0129_CLONE:%.*]] = phi i32 [ [[K50_0_CLONE:%.*]], [[FOR_BODY57_CLONE]] ], [ [[PHI_SUM58]], [[FOR_END274]] ]
; CHECK-NEXT:    [[ARRAYIDX58_CLONE:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K50_0129_CLONE]]
; CHECK-NEXT:    [[TMP99:%.*]] = load float, ptr [[ARRAYIDX58_CLONE]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[SUB59_CLONE:%.*]] = sub i32 [[N41_0131]], [[K50_0129_CLONE]]
; CHECK-NEXT:    [[ARRAYIDX60_CLONE:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB59_CLONE]]
; CHECK-NEXT:    [[TMP100:%.*]] = load float, ptr [[ARRAYIDX60_CLONE]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[TMP101]] = tail call float @llvm.fmuladd.f32(float [[TMP99]], float [[TMP100]], float [[TMP98]])
; CHECK-NEXT:    [[K50_0_CLONE]] = add i32 [[K50_0129_CLONE]], 1
; CHECK-NEXT:    [[CMP56_NOT_CLONE:%.*]] = icmp ugt i32 [[K50_0_CLONE]], [[SUB54]]
; CHECK-NEXT:    br i1 [[CMP56_NOT_CLONE]], label [[FOR_COND_FOR_END_CRIT_EDGE61:%.*]], label [[FOR_BODY57_CLONE]], !llvm.loop [[LOOP13]]
; CHECK:       for.cond.for.end_crit_edge61:
; CHECK-NEXT:    store float [[TMP101]], ptr [[ARRAYIDX51]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    br label [[FOR_END64]]
; CHECK:       for.end64:
; CHECK-NEXT:    [[INC66]] = add nsw i32 [[N41_0131]], 1
; CHECK-NEXT:    [[EXITCOND134_NOT:%.*]] = icmp eq i32 [[INC66]], [[SUB44]]
; CHECK-NEXT:    br i1 [[EXITCOND134_NOT]], label [[RETURN_LOOPEXIT:%.*]], label [[FOR_BODY47]], !llvm.loop [[LOOP14:![0-9]+]]
; CHECK:       return.loopexit:
; CHECK-NEXT:    [[RETVAL_0_PH:%.*]] = phi i32 [ 0, [[FOR_END64]] ]
; CHECK-NEXT:    br label [[RETURN]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458755, [[ENTRY:%.*]] ], [ 0, [[FOR_COND42_PREHEADER]] ], [ [[RETVAL_0_PH]], [[RETURN_LOOPEXIT]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %cmp = icmp eq ptr %Signal, null
  %cmp1 = icmp eq ptr %Kernel, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp4 = icmp eq ptr %convout, null
  %or.cond118 = or i1 %or.cond, %cmp4
  br i1 %or.cond118, label %return, label %if.end6

if.end6:                                          ; preds = %entry
  %cmp7 = icmp slt i32 %siglen, %kernlen
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end6
  %lkern.0 = phi i32 [ %siglen, %if.then8 ], [ %kernlen, %if.end6 ]
  %lsig.0 = phi i32 [ %kernlen, %if.then8 ], [ %siglen, %if.end6 ]
  %kern.0 = phi ptr [ %Signal, %if.then8 ], [ %Kernel, %if.end6 ]
  %sig.0 = phi ptr [ %Kernel, %if.then8 ], [ %Signal, %if.end6 ]
  %cmp10120 = icmp sgt i32 %lkern.0, 0
  br i1 %cmp10120, label %for.body, label %for.cond21.preheader

for.cond21.preheader:                             ; preds = %for.end, %if.end9
  %cmp22125 = icmp slt i32 %lkern.0, %lsig.0
  br i1 %cmp22125, label %for.body24, label %for.cond42.preheader

for.body:                                         ; preds = %for.end, %if.end9
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.end ], [ 1, %if.end9 ]
  %n.0121 = phi i32 [ %inc18, %for.end ], [ 0, %if.end9 ]
  %arrayidx = getelementptr inbounds float, ptr %convout, i32 %n.0121
  store float 0.000000e+00, ptr %arrayidx, align 4, !tbaa !4
  br label %for.body13

for.body13:                                       ; preds = %for.body13, %for.body
  %k.0119 = phi i32 [ 0, %for.body ], [ %inc, %for.body13 ]
  %0 = phi float [ 0.000000e+00, %for.body ], [ %3, %for.body13 ]
  %arrayidx14 = getelementptr inbounds float, ptr %sig.0, i32 %k.0119
  %1 = load float, ptr %arrayidx14, align 4, !tbaa !4
  %sub = sub nsw i32 %n.0121, %k.0119
  %arrayidx15 = getelementptr inbounds float, ptr %kern.0, i32 %sub
  %2 = load float, ptr %arrayidx15, align 4, !tbaa !4
  %3 = tail call float @llvm.fmuladd.f32(float %1, float %2, float %0)
  store float %3, ptr %arrayidx, align 4, !tbaa !4
  %inc = add nuw nsw i32 %k.0119, 1
  %exitcond = icmp eq i32 %inc, %indvars.iv
  br i1 %exitcond, label %for.end, label %for.body13, !llvm.loop !8

for.end:                                          ; preds = %for.body13
  %inc18 = add nuw nsw i32 %n.0121, 1
  %indvars.iv.next = add nuw i32 %indvars.iv, 1
  %exitcond132.not = icmp eq i32 %inc18, %lkern.0
  br i1 %exitcond132.not, label %for.cond21.preheader, label %for.body, !llvm.loop !10

for.cond42.preheader:                             ; preds = %for.end37, %for.cond21.preheader
  %add43 = add i32 %siglen, -1
  %sub44 = add i32 %add43, %kernlen
  %cmp45130 = icmp slt i32 %lsig.0, %sub44
  br i1 %cmp45130, label %for.body47.lr.ph, label %return

for.body47.lr.ph:                                 ; preds = %for.cond42.preheader
  %sub54 = add nsw i32 %lsig.0, -1
  br label %for.body47

for.body24:                                       ; preds = %for.end37, %for.cond21.preheader
  %n20.0126 = phi i32 [ %inc39, %for.end37 ], [ %lkern.0, %for.cond21.preheader ]
  %arrayidx26 = getelementptr inbounds float, ptr %convout, i32 %n20.0126
  store float 0.000000e+00, ptr %arrayidx26, align 4, !tbaa !4
  %sub27 = sub nuw nsw i32 %n20.0126, %lkern.0
  %k25.0122 = add i32 %sub27, 1
  %cmp29.not123 = icmp ugt i32 %k25.0122, %n20.0126
  br i1 %cmp29.not123, label %for.end37, label %for.body30

for.body30:                                       ; preds = %for.body30, %for.body24
  %4 = phi float [ %7, %for.body30 ], [ 0.000000e+00, %for.body24 ]
  %k25.0124 = phi i32 [ %k25.0, %for.body30 ], [ %k25.0122, %for.body24 ]
  %arrayidx31 = getelementptr inbounds float, ptr %sig.0, i32 %k25.0124
  %5 = load float, ptr %arrayidx31, align 4, !tbaa !4
  %sub32 = sub i32 %n20.0126, %k25.0124
  %arrayidx33 = getelementptr inbounds float, ptr %kern.0, i32 %sub32
  %6 = load float, ptr %arrayidx33, align 4, !tbaa !4
  %7 = tail call float @llvm.fmuladd.f32(float %5, float %6, float %4)
  store float %7, ptr %arrayidx26, align 4, !tbaa !4
  %k25.0 = add i32 %k25.0124, 1
  %cmp29.not = icmp ugt i32 %k25.0, %n20.0126
  br i1 %cmp29.not, label %for.end37, label %for.body30, !llvm.loop !11

for.end37:                                        ; preds = %for.body30, %for.body24
  %inc39 = add nuw nsw i32 %n20.0126, 1
  %exitcond133.not = icmp eq i32 %inc39, %lsig.0
  br i1 %exitcond133.not, label %for.cond42.preheader, label %for.body24, !llvm.loop !12

for.body47:                                       ; preds = %for.end64, %for.body47.lr.ph
  %n41.0131 = phi i32 [ %lsig.0, %for.body47.lr.ph ], [ %inc66, %for.end64 ]
  %arrayidx51 = getelementptr inbounds float, ptr %convout, i32 %n41.0131
  store float 0.000000e+00, ptr %arrayidx51, align 4, !tbaa !4
  %sub52 = sub nsw i32 %n41.0131, %lkern.0
  %k50.0127 = add i32 %sub52, 1
  %cmp56.not128 = icmp ugt i32 %k50.0127, %sub54
  br i1 %cmp56.not128, label %for.end64, label %for.body57

for.body57:                                       ; preds = %for.body57, %for.body47
  %8 = phi float [ %11, %for.body57 ], [ 0.000000e+00, %for.body47 ]
  %k50.0129 = phi i32 [ %k50.0, %for.body57 ], [ %k50.0127, %for.body47 ]
  %arrayidx58 = getelementptr inbounds float, ptr %sig.0, i32 %k50.0129
  %9 = load float, ptr %arrayidx58, align 4, !tbaa !4
  %sub59 = sub i32 %n41.0131, %k50.0129
  %arrayidx60 = getelementptr inbounds float, ptr %kern.0, i32 %sub59
  %10 = load float, ptr %arrayidx60, align 4, !tbaa !4
  %11 = tail call float @llvm.fmuladd.f32(float %9, float %10, float %8)
  store float %11, ptr %arrayidx51, align 4, !tbaa !4
  %k50.0 = add i32 %k50.0129, 1
  %cmp56.not = icmp ugt i32 %k50.0, %sub54
  br i1 %cmp56.not, label %for.end64, label %for.body57, !llvm.loop !13

for.end64:                                        ; preds = %for.body57, %for.body47
  %inc66 = add nsw i32 %n41.0131, 1
  %exitcond134.not = icmp eq i32 %inc66, %sub44
  br i1 %exitcond134.not, label %return, label %for.body47, !llvm.loop !14

return:                                           ; preds = %for.end64, %for.cond42.preheader, %entry
  %retval.0 = phi i32 [ 458755, %entry ], [ 0, %for.cond42.preheader ], [ 0, %for.end64 ]
  ret i32 %retval.0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

attributes #0 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"ilp32f"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912 esp-18.1.2_20240912-156-ge5ec068 esp-18.1.2_20240912-156-ge5ec068 esp-18.1.2_20240912-172-g9dacbc0)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.mustprogress"}
!10 = distinct !{!10, !9}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !9}
!14 = distinct !{!14, !9}
;.
; CHECK: [[TBAA4]] = !{[[META5:![0-9]+]], [[META5]], i64 0}
; CHECK: [[META5]] = !{!"float", [[META6:![0-9]+]], i64 0}
; CHECK: [[META6]] = !{!"omnipotent char", [[META7:![0-9]+]], i64 0}
; CHECK: [[META7]] = !{!"Simple C/C++ TBAA"}
; CHECK: [[LOOP8]] = distinct !{[[LOOP8]], [[META9:![0-9]+]]}
; CHECK: [[META9]] = !{!"llvm.loop.mustprogress"}
; CHECK: [[LOOP10]] = distinct !{[[LOOP10]], [[META9]]}
; CHECK: [[LOOP11]] = distinct !{[[LOOP11]], [[META9]]}
; CHECK: [[LOOP12]] = distinct !{[[LOOP12]], [[META9]]}
; CHECK: [[LOOP13]] = distinct !{[[LOOP13]], [[META9]]}
; CHECK: [[LOOP14]] = distinct !{[[LOOP14]], [[META9]]}
;.
