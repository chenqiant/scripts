--- |
  ; ModuleID = 'after_loopunrollandremainder.ll'
  source_filename = "dsps_dotprode_f32_ansi.c"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "riscv32"
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite)
  define dso_local noundef i32 @dsps_dotprode_f32_ansi(ptr noalias nocapture noundef readonly %src1, ptr noalias nocapture noundef readonly %src2, ptr noalias nocapture noundef writeonly %dest, i32 noundef %len, i32 noundef %step1, i32 noundef %step2) local_unnamed_addr #0 {
  entry:
    %0 = icmp sgt i32 %len, 2
    br i1 %0, label %for.cond.preheader1, label %for.cond.preheader
  
  for.cond.preheader:                               ; preds = %entry
    %cmp47110 = icmp sgt i32 %len, 0
    br i1 %cmp47110, label %for.body.clone.preheader, label %if.end
  
  for.body.clone.preheader:                         ; preds = %for.cond.preheader
    %1 = shl i32 %step2, 2
    %2 = shl i32 %step1, 2
    br label %for.body.clone
  
  if.end:                                           ; preds = %for.body.clone, %for.end37, %for.cond.preheader
    %acc.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader ], [ %add44, %for.end37 ], [ %46, %for.body.clone ]
    store float %acc.0.lcssa, ptr %dest, align 4, !tbaa !4
    ret i32 0
  
  for.cond.preheader1:                              ; preds = %entry
    %sub = add nsw i32 %len, -7
    %cmp1113 = icmp ugt i32 %len, 7
    br i1 %cmp1113, label %for.body.preheader, label %for.cond31.preheader
  
  for.body.preheader:                               ; preds = %for.cond.preheader1
    %3 = and i32 %len, 2147483640
    %4 = shl i32 %step1, 5
    %5 = shl i32 %step2, 5
    %scevgep10 = getelementptr i8, ptr %src1, i32 16
    %scevgep19 = getelementptr i8, ptr %src2, i32 16
    %smax = call i32 @llvm.smax.i32(i32 %sub, i32 8)
    %6 = add nsw i32 %smax, -1
    %7 = lshr i32 %6, 3
    %8 = shl i32 %7, 5
    %9 = add i32 %8, 48
    %scevgep28 = getelementptr i8, ptr %src1, i32 %9
    br label %for.body
  
  for.cond31.preheader:                             ; preds = %for.body, %for.cond.preheader1
    %acc0.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %19, %for.body ]
    %acc1.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %22, %for.body ]
    %acc2.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %25, %for.body ]
    %acc3.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %28, %for.body ]
    %acc4.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %31, %for.body ]
    %acc5.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %34, %for.body ]
    %acc6.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %37, %for.body ]
    %acc7.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %40, %for.body ]
    %i.0.lcssa = phi i32 [ 0, %for.cond.preheader1 ], [ %3, %for.body ]
    %cmp32132 = icmp sgt i32 %len, %i.0.lcssa
    br i1 %cmp32132, label %for.body33.preheader, label %for.end37
  
  for.body33.preheader:                             ; preds = %for.cond31.preheader
    %10 = sub i32 %len, %i.0.lcssa
    %11 = mul i32 %i.0.lcssa, %step2
    %12 = shl i32 %11, 2
    %scevgep = getelementptr i8, ptr %src2, i32 %12
    %13 = shl i32 %step2, 2
    %14 = mul i32 %i.0.lcssa, %step1
    %15 = shl i32 %14, 2
    %scevgep3 = getelementptr i8, ptr %src1, i32 %15
    %16 = shl i32 %step1, 2
    br label %for.body33
  
  for.body:                                         ; preds = %for.body, %for.body.preheader
    %lsr.iv20 = phi ptr [ %scevgep21, %for.body ], [ %scevgep19, %for.body.preheader ]
    %lsr.iv11 = phi ptr [ %scevgep12, %for.body ], [ %scevgep10, %for.body.preheader ]
    %lsr.iv8 = phi ptr [ %scevgep9, %for.body ], [ %src2, %for.body.preheader ]
    %lsr.iv6 = phi ptr [ %scevgep7, %for.body ], [ %src1, %for.body.preheader ]
    %acc.09 = phi float [ %19, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc1 = phi float [ %22, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc2 = phi float [ %25, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc3 = phi float [ %28, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc4 = phi float [ %31, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc5 = phi float [ %34, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc6 = phi float [ %37, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc7 = phi float [ %40, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %17 = load float, ptr %lsr.iv6, align 4, !tbaa !4
    %18 = load float, ptr %lsr.iv8, align 4, !tbaa !4
    %19 = tail call float @llvm.fmuladd.f32(float %17, float %18, float %acc.09)
    %scevgep14 = getelementptr i8, ptr %lsr.iv11, i32 -12
    %20 = load float, ptr %scevgep14, align 4, !tbaa !4
    %scevgep24 = getelementptr i8, ptr %lsr.iv20, i32 -12
    %21 = load float, ptr %scevgep24, align 4, !tbaa !4
    %22 = tail call float @llvm.fmuladd.f32(float %20, float %21, float %acc1)
    %scevgep15 = getelementptr i8, ptr %lsr.iv11, i32 -8
    %23 = load float, ptr %scevgep15, align 4, !tbaa !4
    %scevgep25 = getelementptr i8, ptr %lsr.iv20, i32 -8
    %24 = load float, ptr %scevgep25, align 4, !tbaa !4
    %25 = tail call float @llvm.fmuladd.f32(float %23, float %24, float %acc2)
    %scevgep16 = getelementptr i8, ptr %lsr.iv11, i32 -4
    %26 = load float, ptr %scevgep16, align 4, !tbaa !4
    %scevgep26 = getelementptr i8, ptr %lsr.iv20, i32 -4
    %27 = load float, ptr %scevgep26, align 4, !tbaa !4
    %28 = tail call float @llvm.fmuladd.f32(float %26, float %27, float %acc3)
    %29 = load float, ptr %lsr.iv11, align 4, !tbaa !4
    %30 = load float, ptr %lsr.iv20, align 4, !tbaa !4
    %31 = tail call float @llvm.fmuladd.f32(float %29, float %30, float %acc4)
    %scevgep18 = getelementptr i8, ptr %lsr.iv11, i32 4
    %32 = load float, ptr %scevgep18, align 4, !tbaa !4
    %scevgep27 = getelementptr i8, ptr %lsr.iv20, i32 4
    %33 = load float, ptr %scevgep27, align 4, !tbaa !4
    %34 = tail call float @llvm.fmuladd.f32(float %32, float %33, float %acc5)
    %scevgep17 = getelementptr i8, ptr %lsr.iv11, i32 8
    %35 = load float, ptr %scevgep17, align 4, !tbaa !4
    %scevgep23 = getelementptr i8, ptr %lsr.iv20, i32 8
    %36 = load float, ptr %scevgep23, align 4, !tbaa !4
    %37 = tail call float @llvm.fmuladd.f32(float %35, float %36, float %acc6)
    %scevgep13 = getelementptr i8, ptr %lsr.iv11, i32 12
    %38 = load float, ptr %scevgep13, align 4, !tbaa !4
    %scevgep22 = getelementptr i8, ptr %lsr.iv20, i32 12
    %39 = load float, ptr %scevgep22, align 4, !tbaa !4
    %40 = tail call float @llvm.fmuladd.f32(float %38, float %39, float %acc7)
    %scevgep7 = getelementptr i8, ptr %lsr.iv6, i32 %4
    %scevgep9 = getelementptr i8, ptr %lsr.iv8, i32 %5
    %scevgep12 = getelementptr i8, ptr %lsr.iv11, i32 32
    %scevgep21 = getelementptr i8, ptr %lsr.iv20, i32 32
    %lsr_fold_term_cond.replaced_term_cond = icmp eq ptr %scevgep12, %scevgep28
    br i1 %lsr_fold_term_cond.replaced_term_cond, label %for.cond31.preheader, label %for.body, !llvm.loop !8
  
  for.body33:                                       ; preds = %for.body33.preheader, %for.body33
    %lsr.iv4 = phi ptr [ %scevgep3, %for.body33.preheader ], [ %scevgep5, %for.body33 ]
    %lsr.iv1 = phi ptr [ %scevgep, %for.body33.preheader ], [ %scevgep2, %for.body33 ]
    %lsr.iv = phi i32 [ %10, %for.body33.preheader ], [ %lsr.iv.next, %for.body33 ]
    %acc.0933 = phi float [ %43, %for.body33 ], [ %acc0.0.lcssa, %for.body33.preheader ]
    %41 = load float, ptr %lsr.iv4, align 4, !tbaa !4
    %42 = load float, ptr %lsr.iv1, align 4, !tbaa !4
    %43 = tail call float @llvm.fmuladd.f32(float %41, float %42, float %acc.0933)
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i8, ptr %lsr.iv1, i32 %13
    %scevgep5 = getelementptr i8, ptr %lsr.iv4, i32 %16
    %exitcond.not33 = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond.not33, label %for.end37, label %for.body33, !llvm.loop !8
  
  for.end37:                                        ; preds = %for.body33, %for.cond31.preheader
    %acc0.1.lcssa = phi float [ %acc0.0.lcssa, %for.cond31.preheader ], [ %43, %for.body33 ]
    %sum01 = fadd float %acc1.0.lcssa, %acc0.1.lcssa
    %sum23 = fadd float %acc2.0.lcssa, %acc3.0.lcssa
    %sum45 = fadd float %acc4.0.lcssa, %acc5.0.lcssa
    %sum67 = fadd float %acc6.0.lcssa, %acc7.0.lcssa
    %sum0123 = fadd float %sum23, %sum01
    %sum4567 = fadd float %sum45, %sum67
    %add44 = fadd float %sum4567, %sum0123
    br label %if.end
  
  for.body.clone:                                   ; preds = %for.body.clone.preheader, %for.body.clone
    %lsr.iv33 = phi ptr [ %src1, %for.body.clone.preheader ], [ %scevgep34, %for.body.clone ]
    %lsr.iv31 = phi ptr [ %src2, %for.body.clone.preheader ], [ %scevgep32, %for.body.clone ]
    %lsr.iv29 = phi i32 [ %len, %for.body.clone.preheader ], [ %lsr.iv.next30, %for.body.clone ]
    %acc.09.clone = phi float [ %46, %for.body.clone ], [ 0.000000e+00, %for.body.clone.preheader ]
    %44 = load float, ptr %lsr.iv33, align 4, !tbaa !4
    %45 = load float, ptr %lsr.iv31, align 4, !tbaa !4
    %46 = tail call float @llvm.fmuladd.f32(float %44, float %45, float %acc.09.clone)
    %lsr.iv.next30 = add i32 %lsr.iv29, -1
    %scevgep32 = getelementptr i8, ptr %lsr.iv31, i32 %1
    %scevgep34 = getelementptr i8, ptr %lsr.iv33, i32 %2
    %exitcond.not.clone = icmp eq i32 %lsr.iv.next30, 0
    br i1 %exitcond.not.clone, label %if.end, label %for.body.clone, !llvm.loop !8
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare float @llvm.fmuladd.f32(float, float, float) #1
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare i32 @llvm.smax.i32(i32, i32) #2
  
  attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) "target-cpu"="esp32p4" }
  attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  
  !llvm.module.flags = !{!0, !1, !2}
  !llvm.ident = !{!3}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"target-abi", !"ilp32f"}
  !2 = !{i32 8, !"SmallDataLimit", i32 8}
  !3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333)"}
  !4 = !{!5, !5, i64 0}
  !5 = !{!"float", !6, i64 0}
  !6 = !{!"omnipotent char", !7, i64 0}
  !7 = !{!"Simple C/C++ TBAA"}
  !8 = distinct !{!8, !9}
  !9 = !{!"llvm.loop.mustprogress"}

...
---
name:            dsps_dotprode_f32_ansi
alignment:       2
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$x10', virtual-reg: '' }
  - { reg: '$x11', virtual-reg: '' }
  - { reg: '$x12', virtual-reg: '' }
  - { reg: '$x13', virtual-reg: '' }
  - { reg: '$x14', virtual-reg: '' }
  - { reg: '$x15', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.0.entry:
    successors: %bb.1(0x40000000), %bb.7(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15
  
    renamable $x16 = ADDI $x0, 2
    BGE killed renamable $x16, renamable $x13, %bb.7
  
  bb.1.for.cond.preheader1:
    successors: %bb.2(0x40000000), %bb.11(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15
  
    renamable $x16 = ADDI $x0, 8
    BLTU renamable $x13, renamable $x16, %bb.11
  
  bb.2.for.body.preheader:
    successors: %bb.3(0x40000000), %bb.4(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15, $x16
  
    renamable $x28 = nsw ADDI renamable $x13, -7
    renamable $x17 = LUI 524288
    renamable $x17 = ADDI killed renamable $x17, -8
    BLT killed renamable $x16, renamable $x28, %bb.4
  
  bb.3.for.body.preheader:
    successors: %bb.4(0x80000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15, $x17
  
    renamable $x28 = ADDI $x0, 8
  
  bb.4.for.body.preheader:
    successors: %bb.5(0x80000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15, $x17, $x28
  
    renamable $x16 = AND renamable $x13, killed renamable $x17
    renamable $x17 = SLLI renamable $x14, 5
    renamable $x5 = SLLI renamable $x15, 5
    renamable $x6 = ADDI renamable $x10, 16
    renamable $x7 = ADDI renamable $x11, 16
    renamable $x28 = SLLI killed renamable $x28, 2
    renamable $x28 = ADDI killed renamable $x28, -4
    renamable $x28 = ANDI killed renamable $x28, -32
    renamable $x28 = ADD killed renamable $x28, renamable $x10
    renamable $f15_f = FMV_W_X $x0
    renamable $x28 = ADDI killed renamable $x28, 48
    $x29 = ADDI $x11, 0
    $x30 = ADDI $x10, 0
    $f14_f = FSGNJ_S $f15_f, $f15_f
    $f13_f = FSGNJ_S $f15_f, $f15_f
    $f12_f = FSGNJ_S $f15_f, $f15_f
    $f11_f = FSGNJ_S $f15_f, $f15_f
    $f10_f = FSGNJ_S $f15_f, $f15_f
    $f0_f = FSGNJ_S $f15_f, $f15_f
    $f1_f = FSGNJ_S $f15_f, $f15_f
  
  bb.5.for.body:
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
    liveins: $x5, $x6, $x7, $x10, $x11, $x12, $x13, $x14, $x15, $x16, $x17, $x28, $x29, $x30, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $f2_f = FLW renamable $x30, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !4)
    renamable $f3_f = FLW renamable $x29, 0 :: (load (s32) from %ir.lsr.iv8, !tbaa !4)
    renamable $f4_f = FLW renamable $x6, -12 :: (load (s32) from %ir.scevgep14, !tbaa !4)
    renamable $f5_f = FLW renamable $x7, -12 :: (load (s32) from %ir.scevgep24, !tbaa !4)
    renamable $f6_f = FLW renamable $x6, -8 :: (load (s32) from %ir.scevgep15, !tbaa !4)
    renamable $f7_f = FLW renamable $x7, -8 :: (load (s32) from %ir.scevgep25, !tbaa !4)
    renamable $f16_f = FLW renamable $x6, -4 :: (load (s32) from %ir.scevgep16, !tbaa !4)
    renamable $f17_f = FLW renamable $x7, -4 :: (load (s32) from %ir.scevgep26, !tbaa !4)
    renamable $f15_f = nofpexcept FMADD_S killed renamable $f2_f, killed renamable $f3_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f14_f = nofpexcept FMADD_S killed renamable $f4_f, killed renamable $f5_f, killed renamable $f14_f, 7, implicit $frm
    renamable $f13_f = nofpexcept FMADD_S killed renamable $f6_f, killed renamable $f7_f, killed renamable $f13_f, 7, implicit $frm
    renamable $f12_f = nofpexcept FMADD_S killed renamable $f16_f, killed renamable $f17_f, killed renamable $f12_f, 7, implicit $frm
    renamable $f2_f = FLW renamable $x6, 0 :: (load (s32) from %ir.lsr.iv11, !tbaa !4)
    renamable $f3_f = FLW renamable $x7, 0 :: (load (s32) from %ir.lsr.iv20, !tbaa !4)
    renamable $f4_f = FLW renamable $x6, 4 :: (load (s32) from %ir.scevgep18, !tbaa !4)
    renamable $f5_f = FLW renamable $x7, 4 :: (load (s32) from %ir.scevgep27, !tbaa !4)
    renamable $f6_f = FLW renamable $x6, 8 :: (load (s32) from %ir.scevgep17, !tbaa !4)
    renamable $f7_f = FLW renamable $x7, 8 :: (load (s32) from %ir.scevgep23, !tbaa !4)
    renamable $f16_f = FLW renamable $x6, 12 :: (load (s32) from %ir.scevgep13, !tbaa !4)
    renamable $f17_f = FLW renamable $x7, 12 :: (load (s32) from %ir.scevgep22, !tbaa !4)
    renamable $f11_f = nofpexcept FMADD_S killed renamable $f2_f, killed renamable $f3_f, killed renamable $f11_f, 7, implicit $frm
    renamable $f10_f = nofpexcept FMADD_S killed renamable $f4_f, killed renamable $f5_f, killed renamable $f10_f, 7, implicit $frm
    renamable $f0_f = nofpexcept FMADD_S killed renamable $f6_f, killed renamable $f7_f, killed renamable $f0_f, 7, implicit $frm
    renamable $f1_f = nofpexcept FMADD_S killed renamable $f16_f, killed renamable $f17_f, killed renamable $f1_f, 7, implicit $frm
    renamable $x30 = ADD killed renamable $x30, renamable $x17
    renamable $x29 = ADD killed renamable $x29, renamable $x5
    renamable $x6 = ADDI killed renamable $x6, 32
    renamable $x7 = ADDI killed renamable $x7, 32
    BNE renamable $x6, renamable $x28, %bb.5
  
  bb.6.for.cond31.preheader:
    successors: %bb.12(0x40000000), %bb.14(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15, $x16, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    BLT renamable $x16, renamable $x13, %bb.12
    PseudoBR %bb.14
  
  bb.7.for.cond.preheader:
    successors: %bb.8(0x50000000), %bb.15(0x30000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15
  
    BGE $x0, renamable $x13, %bb.15
  
  bb.8.for.body.clone.preheader:
    successors: %bb.9(0x80000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15
  
    renamable $x15 = SLLI killed renamable $x15, 2
    renamable $x14 = SLLI killed renamable $x14, 2
    renamable $f15_f = FMV_W_X $x0
  
  bb.9.for.body.clone:
    successors: %bb.10(0x04000000), %bb.9(0x7c000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15, $f15_f
  
    renamable $f14_f = FLW renamable $x10, 0 :: (load (s32) from %ir.lsr.iv33, !tbaa !4)
    renamable $f13_f = FLW renamable $x11, 0 :: (load (s32) from %ir.lsr.iv31, !tbaa !4)
    renamable $f15_f = nofpexcept FMADD_S killed renamable $f14_f, killed renamable $f13_f, killed renamable $f15_f, 7, implicit $frm
    renamable $x13 = ADDI killed renamable $x13, -1
    renamable $x11 = ADD killed renamable $x11, renamable $x15
    renamable $x10 = ADD killed renamable $x10, renamable $x14
    BNE renamable $x13, $x0, %bb.9
  
  bb.10.if.end:
    liveins: $x12, $f15_f
  
    FSW killed renamable $f15_f, killed renamable $x12, 0 :: (store (s32) into %ir.dest, !tbaa !4)
    $x10 = ADDI $x0, 0
    PseudoRET implicit $x10
  
  bb.11:
    successors: %bb.12(0x40000000), %bb.14(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15
  
    renamable $f15_f = FMV_W_X $x0
    $x16 = ADDI $x0, 0
    $f14_f = FSGNJ_S $f15_f, $f15_f
    $f13_f = FSGNJ_S $f15_f, $f15_f
    $f12_f = FSGNJ_S $f15_f, $f15_f
    $f11_f = FSGNJ_S $f15_f, $f15_f
    $f10_f = FSGNJ_S $f15_f, $f15_f
    $f0_f = FSGNJ_S $f15_f, $f15_f
    $f1_f = FSGNJ_S $f15_f, $f15_f
    BGE $x0, renamable $x13, %bb.14
  
  bb.12.for.body33.preheader:
    successors: %bb.13(0x80000000)
    liveins: $x10, $x11, $x12, $x13, $x14, $x15, $x16, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $x17 = SUB killed renamable $x13, renamable $x16
    renamable $x13 = MUL renamable $x16, renamable $x15
    renamable $x13 = SLLI killed renamable $x13, 2
    renamable $x11 = ADD killed renamable $x11, killed renamable $x13
    renamable $x15 = SLLI killed renamable $x15, 2
    renamable $x13 = MUL killed renamable $x16, renamable $x14
    renamable $x13 = SLLI killed renamable $x13, 2
    renamable $x10 = ADD killed renamable $x10, killed renamable $x13
    renamable $x14 = SLLI killed renamable $x14, 2
  
  bb.13.for.body33:
    successors: %bb.14(0x04000000), %bb.13(0x7c000000)
    liveins: $x10, $x11, $x12, $x14, $x15, $x17, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $f2_f = FLW renamable $x10, 0 :: (load (s32) from %ir.lsr.iv4, !tbaa !4)
    renamable $f3_f = FLW renamable $x11, 0 :: (load (s32) from %ir.lsr.iv1, !tbaa !4)
    renamable $f15_f = nofpexcept FMADD_S killed renamable $f2_f, killed renamable $f3_f, killed renamable $f15_f, 7, implicit $frm
    renamable $x17 = ADDI killed renamable $x17, -1
    renamable $x11 = ADD killed renamable $x11, renamable $x15
    renamable $x10 = ADD killed renamable $x10, renamable $x14
    BNE renamable $x17, $x0, %bb.13
  
  bb.14.for.end37:
    liveins: $x12, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $f15_f = nofpexcept FADD_S killed renamable $f14_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f14_f = nofpexcept FADD_S killed renamable $f13_f, killed renamable $f12_f, 7, implicit $frm
    renamable $f13_f = nofpexcept FADD_S killed renamable $f11_f, killed renamable $f10_f, 7, implicit $frm
    renamable $f12_f = nofpexcept FADD_S killed renamable $f0_f, killed renamable $f1_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f14_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f14_f = nofpexcept FADD_S killed renamable $f13_f, killed renamable $f12_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f14_f, killed renamable $f15_f, 7, implicit $frm
    FSW killed renamable $f15_f, killed renamable $x12, 0 :: (store (s32) into %ir.dest, !tbaa !4)
    $x10 = ADDI $x0, 0
    PseudoRET implicit $x10
  
  bb.15:
    liveins: $x12
  
    renamable $f15_f = FMV_W_X $x0
    FSW killed renamable $f15_f, killed renamable $x12, 0 :: (store (s32) into %ir.dest, !tbaa !4)
    $x10 = ADDI $x0, 0
    PseudoRET implicit $x10

...
