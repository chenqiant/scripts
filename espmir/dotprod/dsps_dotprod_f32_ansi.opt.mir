--- |
  ; ModuleID = 'dsps_dotprod_f32_ansi.mir'
  source_filename = "dsps_dotprod_f32_ansi.c"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "riscv32"
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite)
  define dso_local noundef i32 @dsps_dotprod_f32_ansi(ptr noalias nocapture noundef readonly %src1, ptr noalias nocapture noundef readonly %src2, ptr noalias nocapture noundef writeonly %dest, i32 noundef %len) local_unnamed_addr #0 {
  entry:
    %0 = icmp sgt i32 %len, 2
    br i1 %0, label %for.cond.preheader1, label %for.cond.preheader
  
  for.cond.preheader:                               ; preds = %entry
    %cmp47110 = icmp sgt i32 %len, 0
    br i1 %cmp47110, label %for.body.clone.preheader, label %if.end
  
  for.body.clone.preheader:                         ; preds = %for.cond.preheader
    %1 = shl i32 %len, 2
    %scevgep33 = getelementptr i8, ptr %src2, i32 %1
    br label %for.body.clone
  
  if.end:                                           ; preds = %for.body.clone, %for.end37, %for.cond.preheader
    %acc.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader ], [ %add44, %for.end37 ], [ %38, %for.body.clone ]
    store float %acc.0.lcssa, ptr %dest, align 4, !tbaa !4
    ret i32 0
  
  for.cond.preheader1:                              ; preds = %entry
    %sub = add nsw i32 %len, -7
    %cmp1113 = icmp ugt i32 %len, 7
    br i1 %cmp1113, label %for.body.preheader, label %for.cond31.preheader
  
  for.body.preheader:                               ; preds = %for.cond.preheader1
    %2 = and i32 %len, 2147483640
    %scevgep7 = getelementptr i8, ptr %src2, i32 16
    %scevgep16 = getelementptr i8, ptr %src1, i32 16
    %smax = call i32 @llvm.smax.i32(i32 %sub, i32 8)
    %3 = add nsw i32 %smax, -1
    %4 = lshr i32 %3, 3
    %5 = shl i32 %4, 5
    %6 = add i32 %5, 48
    %scevgep26 = getelementptr i8, ptr %src2, i32 %6
    br label %for.body
  
  for.cond31.preheader:                             ; preds = %for.body, %for.cond.preheader1
    %acc0.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %25, %for.body ]
    %acc1.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %26, %for.body ]
    %acc2.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %27, %for.body ]
    %acc3.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %28, %for.body ]
    %acc4.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %29, %for.body ]
    %acc5.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %30, %for.body ]
    %acc6.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %31, %for.body ]
    %acc7.0.lcssa = phi float [ 0.000000e+00, %for.cond.preheader1 ], [ %32, %for.body ]
    %i.0.lcssa = phi i32 [ 0, %for.cond.preheader1 ], [ %2, %for.body ]
    %cmp32132 = icmp slt i32 %i.0.lcssa, %len
    br i1 %cmp32132, label %for.body33.preheader, label %for.end37
  
  for.body33.preheader:                             ; preds = %for.cond31.preheader
    %7 = shl i32 %i.0.lcssa, 2
    %scevgep = getelementptr i8, ptr %src2, i32 %7
    %scevgep3 = getelementptr i8, ptr %src1, i32 %7
    %8 = shl i32 %len, 2
    %scevgep6 = getelementptr i8, ptr %src2, i32 %8
    br label %for.body33
  
  for.body:                                         ; preds = %for.body, %for.body.preheader
    %lsr.iv17 = phi ptr [ %scevgep18, %for.body ], [ %scevgep16, %for.body.preheader ]
    %lsr.iv = phi ptr [ %scevgep8, %for.body ], [ %scevgep7, %for.body.preheader ]
    %acc.07 = phi float [ %25, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc1 = phi float [ %26, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc2 = phi float [ %27, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc3 = phi float [ %28, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc4 = phi float [ %29, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc5 = phi float [ %30, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc6 = phi float [ %31, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %acc7 = phi float [ %32, %for.body ], [ 0.000000e+00, %for.body.preheader ]
    %scevgep19 = getelementptr i8, ptr %lsr.iv17, i32 -16
    %scevgep10 = getelementptr i8, ptr %lsr.iv, i32 -16
    %scevgep20 = getelementptr i8, ptr %lsr.iv17, i32 -12
    %scevgep11 = getelementptr i8, ptr %lsr.iv, i32 -12
    %scevgep21 = getelementptr i8, ptr %lsr.iv17, i32 -8
    %scevgep12 = getelementptr i8, ptr %lsr.iv, i32 -8
    %scevgep22 = getelementptr i8, ptr %lsr.iv17, i32 -4
    %scevgep13 = getelementptr i8, ptr %lsr.iv, i32 -4
    %scevgep23 = getelementptr i8, ptr %lsr.iv17, i32 4
    %scevgep14 = getelementptr i8, ptr %lsr.iv, i32 4
    %scevgep24 = getelementptr i8, ptr %lsr.iv17, i32 8
    %scevgep15 = getelementptr i8, ptr %lsr.iv, i32 8
    %scevgep25 = getelementptr i8, ptr %lsr.iv17, i32 12
    %scevgep9 = getelementptr i8, ptr %lsr.iv, i32 12
    %9 = load float, ptr %scevgep19, align 4, !tbaa !4
    %10 = load float, ptr %scevgep10, align 4, !tbaa !4
    %11 = load float, ptr %scevgep20, align 4, !tbaa !4
    %12 = load float, ptr %scevgep11, align 4, !tbaa !4
    %13 = load float, ptr %scevgep21, align 4, !tbaa !4
    %14 = load float, ptr %scevgep12, align 4, !tbaa !4
    %15 = load float, ptr %scevgep22, align 4, !tbaa !4
    %16 = load float, ptr %scevgep13, align 4, !tbaa !4
    %17 = load float, ptr %lsr.iv17, align 4, !tbaa !4
    %18 = load float, ptr %lsr.iv, align 4, !tbaa !4
    %19 = load float, ptr %scevgep23, align 4, !tbaa !4
    %20 = load float, ptr %scevgep14, align 4, !tbaa !4
    %21 = load float, ptr %scevgep24, align 4, !tbaa !4
    %22 = load float, ptr %scevgep15, align 4, !tbaa !4
    %23 = load float, ptr %scevgep25, align 4, !tbaa !4
    %24 = load float, ptr %scevgep9, align 4, !tbaa !4
    %25 = tail call float @llvm.fmuladd.f32(float %9, float %10, float %acc.07)
    %26 = tail call float @llvm.fmuladd.f32(float %11, float %12, float %acc1)
    %27 = tail call float @llvm.fmuladd.f32(float %13, float %14, float %acc2)
    %28 = tail call float @llvm.fmuladd.f32(float %15, float %16, float %acc3)
    %29 = tail call float @llvm.fmuladd.f32(float %17, float %18, float %acc4)
    %30 = tail call float @llvm.fmuladd.f32(float %19, float %20, float %acc5)
    %31 = tail call float @llvm.fmuladd.f32(float %21, float %22, float %acc6)
    %32 = tail call float @llvm.fmuladd.f32(float %23, float %24, float %acc7)
    %scevgep8 = getelementptr i8, ptr %lsr.iv, i32 32
    %scevgep18 = getelementptr i8, ptr %lsr.iv17, i32 32
    %lsr_fold_term_cond.replaced_term_cond27 = icmp eq ptr %scevgep8, %scevgep26
    br i1 %lsr_fold_term_cond.replaced_term_cond27, label %for.cond31.preheader, label %for.body, !llvm.loop !8
  
  for.body33:                                       ; preds = %for.body33, %for.body33.preheader
    %lsr.iv4 = phi ptr [ %scevgep3, %for.body33.preheader ], [ %scevgep5, %for.body33 ]
    %lsr.iv1 = phi ptr [ %scevgep, %for.body33.preheader ], [ %scevgep2, %for.body33 ]
    %acc.0733 = phi float [ %35, %for.body33 ], [ %acc0.0.lcssa, %for.body33.preheader ]
    %33 = load float, ptr %lsr.iv4, align 4, !tbaa !4
    %34 = load float, ptr %lsr.iv1, align 4, !tbaa !4
    %35 = tail call float @llvm.fmuladd.f32(float %33, float %34, float %acc.0733)
    %scevgep2 = getelementptr i8, ptr %lsr.iv1, i32 4
    %scevgep5 = getelementptr i8, ptr %lsr.iv4, i32 4
    %lsr_fold_term_cond.replaced_term_cond = icmp eq ptr %scevgep2, %scevgep6
    br i1 %lsr_fold_term_cond.replaced_term_cond, label %for.end37, label %for.body33, !llvm.loop !8
  
  for.end37:                                        ; preds = %for.body33, %for.cond31.preheader
    %acc0.1.lcssa = phi float [ %acc0.0.lcssa, %for.cond31.preheader ], [ %35, %for.body33 ]
    %add38 = fadd float %acc1.0.lcssa, %acc0.1.lcssa
    %add39 = fadd float %acc2.0.lcssa, %add38
    %add40 = fadd float %acc3.0.lcssa, %add39
    %add41 = fadd float %acc4.0.lcssa, %add40
    %add42 = fadd float %acc5.0.lcssa, %add41
    %add43 = fadd float %acc6.0.lcssa, %add42
    %add44 = fadd float %acc7.0.lcssa, %add43
    br label %if.end
  
  for.body.clone:                                   ; preds = %for.body.clone, %for.body.clone.preheader
    %lsr.iv31 = phi ptr [ %src1, %for.body.clone.preheader ], [ %scevgep32, %for.body.clone ]
    %lsr.iv29 = phi ptr [ %src2, %for.body.clone.preheader ], [ %scevgep30, %for.body.clone ]
    %acc.07.clone = phi float [ %38, %for.body.clone ], [ 0.000000e+00, %for.body.clone.preheader ]
    %36 = load float, ptr %lsr.iv31, align 4, !tbaa !4
    %37 = load float, ptr %lsr.iv29, align 4, !tbaa !4
    %38 = tail call float @llvm.fmuladd.f32(float %36, float %37, float %acc.07.clone)
    %scevgep30 = getelementptr i8, ptr %lsr.iv29, i32 4
    %scevgep32 = getelementptr i8, ptr %lsr.iv31, i32 4
    %lsr_fold_term_cond.replaced_term_cond34 = icmp eq ptr %scevgep30, %scevgep33
    br i1 %lsr_fold_term_cond.replaced_term_cond34, label %if.end, label %for.body.clone, !llvm.loop !8
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare float @llvm.fmuladd.f32(float, float, float) #1
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare i32 @llvm.smax.i32(i32, i32) #1
  
  attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+f,+m,+relax,+xesppie,+zicsr,+zifencei,-d,-e,-experimental-zacas,-experimental-zcmop,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-zimop,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-smaia,-smepmp,-ssaia,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) "target-cpu"="esp32p4" }
  
  !llvm.module.flags = !{!0, !1, !2}
  !llvm.ident = !{!3}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"target-abi", !"ilp32f"}
  !2 = !{i32 8, !"SmallDataLimit", i32 8}
  !3 = !{!"Espressif clang version 18.1.2 (https://gitlab.espressif.cn:6688/idf/llvm-project.git esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-173-ga680c2f esp-18.1.2_20240912-159-g1d4d6ed esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240912-159-g7f41e83 esp-18.1.2_20240829 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240829 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g19b0f98 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-182-g14aa699 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-g2ce75d8 esp-18.1.2_20240912-2-g4fd8338 esp-18.1.2_20240912-173-g279ba15 esp-18.1.2_20240912-174-gea75913 esp-18.1.2_20240912-188-g4fb459e esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-201-gd45e9b3 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-177-g05a8c17 esp-18.1.2_20240912-202-gc0d5d19 esp-18.1.2_20240912-1-g6d9b6c0 esp-18.1.2_20240912-2-g8cbccfa esp-18.1.2_20240912-2-g0e0e2c1 esp-18.1.2_20240912-2-gff36117 esp-18.1.2_20240912-178-g344e70f esp-18.1.2_20240912-2-g033ac4d esp-18.1.2_20240912-2-g0a05e54 esp-18.1.2_20240912-2-g2639da8 esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-180-gd5bd65d esp-18.1.2_20240912-183-gaf4b702 esp-18.1.2_20240912-5-g39bbb32f esp-18.1.2_20240912-5-gede6d43 esp-18.1.2_20240912-5-gd4169ab esp-18.1.2_20240912-5-ge743d5e esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-204-gb719e68 esp-18.1.2_20240912-6-g07a121a esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-217-g1614480 esp-18.1.2_20240912-224-g675f4cd esp-18.1.2_20240912-227-g17a3e8a esp-18.1.2_20240912-230-gaa5e53d esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-238-g8482f1f esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-239-g9c7dcf0 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-240-g66b4681 esp-18.1.2_20240912-205-g328bc73 esp-18.1.2_20240912-242-gf3b3614 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333 esp-18.1.2_20240912-243-g1c09333)"}
  !4 = !{!5, !5, i64 0}
  !5 = !{!"float", !6, i64 0}
  !6 = !{!"omnipotent char", !7, i64 0}
  !7 = !{!"Simple C/C++ TBAA"}
  !8 = distinct !{!8, !9}
  !9 = !{!"llvm.loop.mustprogress"}

...
---
name:            dsps_dotprod_f32_ansi
alignment:       2
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$x10', virtual-reg: '' }
  - { reg: '$x11', virtual-reg: '' }
  - { reg: '$x12', virtual-reg: '' }
  - { reg: '$x13', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       16
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: spill-slot, offset: -4, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '$f8_f', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: spill-slot, offset: -8, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '$f9_f', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: spill-slot, offset: -12, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '$f18_f', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: spill-slot, offset: -16, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '$f19_f', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.0.entry:
    successors: %bb.1(0x40000000), %bb.8(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $f8_f, $f9_f, $f18_f, $f19_f
  
    $x2 = frame-setup ADDI $x2, -16
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    FSW killed $f8_f, $x2, 12 :: (store (s32) into %stack.0)
    FSW killed $f9_f, $x2, 8 :: (store (s32) into %stack.1)
    FSW killed $f18_f, $x2, 4 :: (store (s32) into %stack.2)
    FSW killed $f19_f, $x2, 0 :: (store (s32) into %stack.3)
    frame-setup CFI_INSTRUCTION offset $f8_h, -4
    frame-setup CFI_INSTRUCTION offset $f9_h, -8
    frame-setup CFI_INSTRUCTION offset $f18_h, -12
    frame-setup CFI_INSTRUCTION offset $f19_h, -16
    renamable $x14 = ADDI $x0, 2
    BGE killed renamable $x14, renamable $x13, %bb.8
  
  bb.1.for.cond.preheader1:
    successors: %bb.2(0x40000000), %bb.11(0x40000000)
    liveins: $x10, $x11, $x12, $x13
  
    renamable $x14 = ADDI $x0, 8
    BLTU renamable $x13, renamable $x14, %bb.11
  
  bb.2.for.body.preheader:
    successors: %bb.3(0x40000000), %bb.4(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $x14
  
    renamable $x17 = nsw ADDI renamable $x13, -7
    renamable $x15 = LUI 524288
    renamable $x15 = ADDI killed renamable $x15, -8
    BLT killed renamable $x14, renamable $x17, %bb.4
  
  bb.3.for.body.preheader:
    successors: %bb.4(0x80000000)
    liveins: $x10, $x11, $x12, $x13, $x15
  
    renamable $x17 = ADDI $x0, 8
  
  bb.4.for.body.preheader:
    successors: %bb.5(0x80000000)
    liveins: $x10, $x11, $x12, $x13, $x15, $x17
  
    renamable $x16 = AND renamable $x13, killed renamable $x15
    renamable $x15 = ADDI renamable $x11, 16
    renamable $x5 = ADDI renamable $x10, 16
    renamable $x17 = SLLI killed renamable $x17, 2
    renamable $x17 = ADDI killed renamable $x17, -4
    renamable $x14 = ANDI killed renamable $x17, -32
    renamable $x14 = ADD killed renamable $x14, renamable $x11
    renamable $f15_f = FMV_W_X $x0
    renamable $x17 = ADDI killed renamable $x14, 48
    $f14_f = FSGNJ_S $f15_f, $f15_f
    $f13_f = FSGNJ_S $f15_f, $f15_f
    $f12_f = FSGNJ_S $f15_f, $f15_f
    $f11_f = FSGNJ_S $f15_f, $f15_f
    $f10_f = FSGNJ_S $f15_f, $f15_f
    $f0_f = FSGNJ_S $f15_f, $f15_f
    $f1_f = FSGNJ_S $f15_f, $f15_f
    ESP_LP_SETUP 0, $x17, %bb.6
  
  bb.5.for.body:
    successors: %bb.6(0x80000000)
    liveins: $x5, $x10, $x11, $x12, $x13, $x15, $x16, $x17, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $f2_f = FLW renamable $x5, -16 :: (load (s32) from %ir.scevgep19, !tbaa !4)
    renamable $f3_f = FLW renamable $x15, -16 :: (load (s32) from %ir.scevgep10, !tbaa !4)
    renamable $f4_f = FLW renamable $x5, -12 :: (load (s32) from %ir.scevgep20, !tbaa !4)
    renamable $f5_f = FLW renamable $x15, -12 :: (load (s32) from %ir.scevgep11, !tbaa !4)
    renamable $f6_f = FLW renamable $x5, -8 :: (load (s32) from %ir.scevgep21, !tbaa !4)
    renamable $f7_f = FLW renamable $x15, -8 :: (load (s32) from %ir.scevgep12, !tbaa !4)
    renamable $f16_f = FLW renamable $x5, -4 :: (load (s32) from %ir.scevgep22, !tbaa !4)
    renamable $f17_f = FLW renamable $x15, -4 :: (load (s32) from %ir.scevgep13, !tbaa !4)
    renamable $f28_f = FLW renamable $x5, 0 :: (load (s32) from %ir.lsr.iv17, !tbaa !4)
    renamable $f29_f = FLW renamable $x15, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)
    renamable $f30_f = FLW renamable $x5, 4 :: (load (s32) from %ir.scevgep23, !tbaa !4)
    renamable $f31_f = FLW renamable $x15, 4 :: (load (s32) from %ir.scevgep14, !tbaa !4)
    renamable $f8_f = FLW renamable $x5, 8 :: (load (s32) from %ir.scevgep24, !tbaa !4)
    renamable $f9_f = FLW renamable $x15, 8 :: (load (s32) from %ir.scevgep15, !tbaa !4)
    renamable $f18_f = FLW renamable $x5, 12 :: (load (s32) from %ir.scevgep25, !tbaa !4)
    renamable $f19_f = FLW renamable $x15, 12 :: (load (s32) from %ir.scevgep9, !tbaa !4)
    renamable $f15_f = nofpexcept FMADD_S killed renamable $f2_f, killed renamable $f3_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f14_f = nofpexcept FMADD_S killed renamable $f4_f, killed renamable $f5_f, killed renamable $f14_f, 7, implicit $frm
    renamable $f13_f = nofpexcept FMADD_S killed renamable $f6_f, killed renamable $f7_f, killed renamable $f13_f, 7, implicit $frm
    renamable $f12_f = nofpexcept FMADD_S killed renamable $f16_f, killed renamable $f17_f, killed renamable $f12_f, 7, implicit $frm
    renamable $f11_f = nofpexcept FMADD_S killed renamable $f28_f, killed renamable $f29_f, killed renamable $f11_f, 7, implicit $frm
    renamable $f10_f = nofpexcept FMADD_S killed renamable $f30_f, killed renamable $f31_f, killed renamable $f10_f, 7, implicit $frm
    renamable $f0_f = nofpexcept FMADD_S killed renamable $f8_f, killed renamable $f9_f, killed renamable $f0_f, 7, implicit $frm
    renamable $f1_f = nofpexcept FMADD_S killed renamable $f18_f, killed renamable $f19_f, killed renamable $f1_f, 7, implicit $frm
    renamable $x15 = ADDI killed renamable $x15, 32
  
  bb.6.for.body:
    successors: %bb.7(0x04000000), %bb.5(0x7c000000)
    liveins: $x1, $x8, $x9, $x18, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $f27_f, $f27_h, $f26_f, $f26_h, $f25_f, $f25_h, $f24_f, $f24_h, $f20_f, $f20_h, $f21_f, $f21_h, $f22_f, $f22_h, $f23_f, $f23_h, $x10, $x11, $x12, $x13, $x16, $f0_f, $f0_h, $f1_f, $f1_h, $f10_f, $f10_h, $f11_f, $f11_h, $f12_f, $f12_h, $f13_f, $f13_h, $f14_f, $f14_h, $f15_f, $f15_h, $x17, $x15, $x5
  
    renamable $x5 = ADDI killed renamable $x5, 32
  
  bb.7.for.cond31.preheader:
    successors: %bb.12(0x40000000), %bb.14(0x40000000)
    liveins: $x10, $x11, $x12, $x13, $x16, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    BLT renamable $x16, renamable $x13, %bb.12
    PseudoBR %bb.14
  
  bb.8.for.cond.preheader:
    successors: %bb.9(0x50000000), %bb.15(0x30000000)
    liveins: $x10, $x11, $x12, $x13
  
    BGE $x0, renamable $x13, %bb.15
  
  bb.9.for.body.clone.preheader:
    successors: %bb.10(0x80000000)
    liveins: $x10, $x11, $x12, $x13
  
    renamable $x13 = SLLI killed renamable $x13, 2
    renamable $x13 = ADD renamable $x11, killed renamable $x13
    renamable $f15_f = FMV_W_X $x0
  
  bb.10.for.body.clone:
    successors: %bb.16(0x04000000), %bb.10(0x7c000000)
    liveins: $x10, $x11, $x12, $x13, $f15_f
  
    renamable $f14_f = FLW renamable $x10, 0 :: (load (s32) from %ir.lsr.iv31, !tbaa !4)
    renamable $f13_f = FLW renamable $x11, 0 :: (load (s32) from %ir.lsr.iv29, !tbaa !4)
    renamable $f15_f = nofpexcept FMADD_S killed renamable $f14_f, killed renamable $f13_f, killed renamable $f15_f, 7, implicit $frm
    renamable $x11 = ADDI killed renamable $x11, 4
    renamable $x10 = ADDI killed renamable $x10, 4
    BNE renamable $x11, renamable $x13, %bb.10
    PseudoBR %bb.16
  
  bb.11:
    successors: %bb.12(0x40000000), %bb.14(0x40000000)
    liveins: $x10, $x11, $x12, $x13
  
    renamable $f15_f = FMV_W_X $x0
    $x16 = ADDI $x0, 0
    $f14_f = FSGNJ_S $f15_f, $f15_f
    $f13_f = FSGNJ_S $f15_f, $f15_f
    $f12_f = FSGNJ_S $f15_f, $f15_f
    $f11_f = FSGNJ_S $f15_f, $f15_f
    $f10_f = FSGNJ_S $f15_f, $f15_f
    $f0_f = FSGNJ_S $f15_f, $f15_f
    $f1_f = FSGNJ_S $f15_f, $f15_f
    BGE $x0, renamable $x13, %bb.14
  
  bb.12.for.body33.preheader:
    successors: %bb.13(0x80000000)
    liveins: $x10, $x11, $x12, $x13, $x16, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $x16 = SLLI killed renamable $x16, 2
    renamable $x14 = ADD renamable $x11, renamable $x16
    renamable $x10 = ADD killed renamable $x10, killed renamable $x16
    renamable $x13 = SLLI killed renamable $x13, 2
    renamable $x11 = ADD killed renamable $x11, killed renamable $x13
  
  bb.13.for.body33:
    successors: %bb.14(0x04000000), %bb.13(0x7c000000)
    liveins: $x10, $x11, $x12, $x14, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $f2_f = FLW renamable $x10, 0 :: (load (s32) from %ir.lsr.iv4, !tbaa !4)
    renamable $f3_f = FLW renamable $x14, 0 :: (load (s32) from %ir.lsr.iv1, !tbaa !4)
    renamable $f15_f = nofpexcept FMADD_S killed renamable $f2_f, killed renamable $f3_f, killed renamable $f15_f, 7, implicit $frm
    renamable $x14 = ADDI killed renamable $x14, 4
    renamable $x10 = ADDI killed renamable $x10, 4
    BNE renamable $x14, renamable $x11, %bb.13
  
  bb.14.for.end37:
    successors: %bb.16(0x80000000)
    liveins: $x12, $f0_f, $f1_f, $f10_f, $f11_f, $f12_f, $f13_f, $f14_f, $f15_f
  
    renamable $f15_f = nofpexcept FADD_S killed renamable $f14_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f13_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f12_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f11_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f10_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f0_f, killed renamable $f15_f, 7, implicit $frm
    renamable $f15_f = nofpexcept FADD_S killed renamable $f1_f, killed renamable $f15_f, 7, implicit $frm
    PseudoBR %bb.16
  
  bb.15:
    successors: %bb.16(0x80000000)
    liveins: $x12
  
    renamable $f15_f = FMV_W_X $x0
  
  bb.16.if.end:
    liveins: $x12, $f15_f
  
    FSW killed renamable $f15_f, killed renamable $x12, 0 :: (store (s32) into %ir.dest, !tbaa !4)
    $x10 = ADDI $x0, 0
    $f8_f = FLW $x2, 12 :: (load (s32) from %stack.0)
    $f9_f = FLW $x2, 8 :: (load (s32) from %stack.1)
    $f18_f = FLW $x2, 4 :: (load (s32) from %stack.2)
    $f19_f = FLW $x2, 0 :: (load (s32) from %stack.3)
    $x2 = frame-destroy ADDI $x2, 16
    PseudoRET implicit $x10

...
