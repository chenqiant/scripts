; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
define dso_local noundef i32 @dsps_corr_f32_ansi(ptr noundef readonly %Signal, i32 noundef %siglen, ptr noundef readonly %Pattern, i32 noundef %patlen, ptr noundef writeonly %dest) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_corr_f32_ansi(
; CHECK-SAME: ptr noalias noundef readonly [[SIGNAL:%.*]], i32 noundef [[SIGLEN:%.*]], ptr noalias noundef readonly [[PATTERN:%.*]], i32 noundef [[PATLEN:%.*]], ptr noalias noundef writeonly [[DEST:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[SIGNAL]], null
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq ptr [[PATTERN]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[CMP1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp eq ptr [[DEST]], null
; CHECK-NEXT:    [[OR_COND33:%.*]] = or i1 [[OR_COND]], [[CMP4]]
; CHECK-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[SIGLEN]], [[PATLEN]]
; CHECK-NEXT:    [[OR_COND34:%.*]] = or i1 [[CMP7]], [[OR_COND33]]
; CHECK-NEXT:    br i1 [[OR_COND34]], label [[RETURN:%.*]], label [[IF_END:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[SIGLEN]], [[PATLEN]]
; CHECK-NEXT:    [[SUB6:%.*]] = add nsw i32 [[SUB]], -15
; CHECK-NEXT:    [[CMP1235_NOT:%.*]] = icmp sgt i32 [[SUB]], 15
; CHECK-NEXT:    br i1 [[CMP1235_NOT]], label [[FOR_COND8_PREHEADER_LR_PH:%.*]], label [[FOR_COND91_PREHEADER:%.*]]
; CHECK:       for.cond8.preheader.lr.ph:
; CHECK-NEXT:    [[CMP9242:%.*]] = icmp sgt i32 [[PATLEN]], 0
; CHECK-NEXT:    br label [[FOR_COND8_PREHEADER:%.*]]
; CHECK:       for.cond8.preheader:
; CHECK-NEXT:    [[N_0276:%.*]] = phi i32 [ 0, [[FOR_COND8_PREHEADER_LR_PH]] ], [ [[ADD89:%.*]], [[FOR_COND_CLEANUP:%.*]] ]
; CHECK-NEXT:    br i1 [[CMP9242]], label [[FOR_BODY10_LR_PH:%.*]], label [[FOR_COND_CLEANUP]]
; CHECK:       for.body10.lr.ph:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr float, ptr [[SIGNAL]], i32 [[N_0276]]
; CHECK-NEXT:    br label [[FOR_BODY14_US_UNROLL:%.*]]
; CHECK:       for.cond91.preheader:
; CHECK-NEXT:    [[N_0_LCSSA:%.*]] = phi i32 [ 0, [[IF_END]] ], [ [[ADD89]], [[FOR_COND_CLEANUP]] ]
; CHECK-NEXT:    [[CMP92_NOT282:%.*]] = icmp sgt i32 [[N_0_LCSSA]], [[SUB]]
; CHECK-NEXT:    br i1 [[CMP92_NOT282]], label [[RETURN]], label [[FOR_COND95_PREHEADER_LR_PH:%.*]]
; CHECK:       for.cond95.preheader.lr.ph:
; CHECK-NEXT:    [[CMP92678:%.*]] = icmp sgt i32 [[PATLEN]], 0
; CHECK-NEXT:    br i1 [[CMP92678]], label [[FOR_COND11_PREHEADER_US_PREHEADER:%.*]], label [[FOR_COND11_PREHEADER_PREHEADER:%.*]]
; CHECK:       for.cond11.preheader.preheader:
; CHECK-NEXT:    [[TMP1:%.*]] = shl i32 [[N_0_LCSSA]], 2
; CHECK-NEXT:    [[SCEVGEP:%.*]] = getelementptr i8, ptr [[DEST]], i32 [[TMP1]]
; CHECK-NEXT:    [[TMP2:%.*]] = add i32 [[SIGLEN]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[N_0_LCSSA]], [[PATLEN]]
; CHECK-NEXT:    [[TMP4:%.*]] = sub i32 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = shl i32 [[TMP4]], 2
; CHECK-NEXT:    tail call void @llvm.memset.p0.i32(ptr nonnull align 4 [[SCEVGEP]], i8 0, i32 [[TMP5]], i1 false)
; CHECK-NEXT:    br label [[RETURN]]
; CHECK:       for.cond11.preheader.us.preheader:
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[SIGLEN]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP6]], [[PATLEN]]
; CHECK-NEXT:    br label [[FOR_COND11_PREHEADER_US:%.*]]
; CHECK:       for.cond11.preheader.us:
; CHECK-NEXT:    [[N_038_US:%.*]] = phi i32 [ [[INC18_US:%.*]], [[FOR_COND11_FOR_COND_CLEANUP13_CRIT_EDGE_US:%.*]] ], [ [[N_0_LCSSA]], [[FOR_COND11_PREHEADER_US_PREHEADER]] ]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr float, ptr [[SIGNAL]], i32 [[N_038_US]]
; CHECK-NEXT:    br label [[FOR_BODY14_US:%.*]]
; CHECK:       for.body14.us:
; CHECK-NEXT:    [[M_037_US:%.*]] = phi i32 [ 0, [[FOR_COND11_PREHEADER_US]] ], [ [[INC_US:%.*]], [[FOR_BODY14_US]] ]
; CHECK-NEXT:    [[K_CORR_036_US:%.*]] = phi float [ 0.000000e+00, [[FOR_COND11_PREHEADER_US]] ], [ [[TMP11:%.*]], [[FOR_BODY14_US]] ]
; CHECK-NEXT:    [[ARRAYIDX_US:%.*]] = getelementptr float, ptr [[TMP8]], i32 [[M_037_US]]
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX_US]], align 4
; CHECK-NEXT:    [[ARRAYIDX15_US:%.*]] = getelementptr inbounds float, ptr [[PATTERN]], i32 [[M_037_US]]
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX15_US]], align 4
; CHECK-NEXT:    [[TMP11]] = tail call float @llvm.fmuladd.f32(float [[TMP9]], float [[TMP10]], float [[K_CORR_036_US]])
; CHECK-NEXT:    [[INC_US]] = add nuw i32 [[M_037_US]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC_US]], [[PATLEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND11_FOR_COND_CLEANUP13_CRIT_EDGE_US]], label [[FOR_BODY14_US]]
; CHECK:       for.cond11.for.cond.cleanup13_crit_edge.us:
; CHECK-NEXT:    [[ARRAYIDX16_US:%.*]] = getelementptr inbounds float, ptr [[DEST]], i32 [[N_038_US]]
; CHECK-NEXT:    store float [[TMP11]], ptr [[ARRAYIDX16_US]], align 4
; CHECK-NEXT:    [[INC18_US]] = add nuw i32 [[N_038_US]], 1
; CHECK-NEXT:    [[CMP10_NOT_US_NOT:%.*]] = icmp eq i32 [[N_038_US]], [[TMP7]]
; CHECK-NEXT:    br i1 [[CMP10_NOT_US_NOT]], label [[RETURN]], label [[FOR_COND11_PREHEADER_US]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    [[TMP12:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP60:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP61:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP62:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP63:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP64:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP65:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP66:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP67:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP68:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP69:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP22:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP70:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP71:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP72:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP73:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP26:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP74:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP27:%.*]] = phi float [ 0.000000e+00, [[FOR_COND8_PREHEADER]] ], [ [[TMP75:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[ADD:%.*]] = or disjoint i32 [[N_0276]], 1
; CHECK-NEXT:    [[ADD17:%.*]] = or disjoint i32 [[N_0276]], 2
; CHECK-NEXT:    [[ADD19:%.*]] = or disjoint i32 [[N_0276]], 3
; CHECK-NEXT:    [[ADD21:%.*]] = or disjoint i32 [[N_0276]], 4
; CHECK-NEXT:    [[ADD23:%.*]] = or disjoint i32 [[N_0276]], 5
; CHECK-NEXT:    [[ADD25:%.*]] = or disjoint i32 [[N_0276]], 6
; CHECK-NEXT:    [[ADD27:%.*]] = or disjoint i32 [[N_0276]], 7
; CHECK-NEXT:    [[ADD29:%.*]] = or disjoint i32 [[N_0276]], 8
; CHECK-NEXT:    [[ADD31:%.*]] = or disjoint i32 [[N_0276]], 9
; CHECK-NEXT:    [[ADD33:%.*]] = or disjoint i32 [[N_0276]], 10
; CHECK-NEXT:    [[ADD35:%.*]] = or disjoint i32 [[N_0276]], 11
; CHECK-NEXT:    [[ADD37:%.*]] = or disjoint i32 [[N_0276]], 12
; CHECK-NEXT:    [[ADD39:%.*]] = or disjoint i32 [[N_0276]], 13
; CHECK-NEXT:    [[ADD41:%.*]] = or disjoint i32 [[N_0276]], 14
; CHECK-NEXT:    [[ADD43:%.*]] = or disjoint i32 [[N_0276]], 15
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr float, ptr [[DEST]], i32 [[N_0276]]
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD17]]
; CHECK-NEXT:    [[ARRAYIDX20:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD19]]
; CHECK-NEXT:    [[ARRAYIDX22:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD21]]
; CHECK-NEXT:    [[ARRAYIDX24:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD23]]
; CHECK-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD25]]
; CHECK-NEXT:    [[ARRAYIDX28:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD27]]
; CHECK-NEXT:    [[ARRAYIDX30:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD29]]
; CHECK-NEXT:    [[ARRAYIDX32:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD31]]
; CHECK-NEXT:    [[ARRAYIDX34:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD33]]
; CHECK-NEXT:    [[ARRAYIDX36:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD35]]
; CHECK-NEXT:    [[ARRAYIDX38:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD37]]
; CHECK-NEXT:    [[ARRAYIDX40:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD39]]
; CHECK-NEXT:    [[ARRAYIDX42:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD41]]
; CHECK-NEXT:    [[ARRAYIDX44:%.*]] = getelementptr float, ptr [[DEST]], i32 [[ADD43]]
; CHECK-NEXT:    store float [[TMP27]], ptr [[ARRAYIDX44]], align 4
; CHECK-NEXT:    store float [[TMP26]], ptr [[ARRAYIDX42]], align 4
; CHECK-NEXT:    store float [[TMP25]], ptr [[ARRAYIDX40]], align 4
; CHECK-NEXT:    store float [[TMP24]], ptr [[ARRAYIDX38]], align 4
; CHECK-NEXT:    store float [[TMP23]], ptr [[ARRAYIDX36]], align 4
; CHECK-NEXT:    store float [[TMP22]], ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    store float [[TMP21]], ptr [[ARRAYIDX32]], align 4
; CHECK-NEXT:    store float [[TMP20]], ptr [[ARRAYIDX30]], align 4
; CHECK-NEXT:    store float [[TMP19]], ptr [[ARRAYIDX28]], align 4
; CHECK-NEXT:    store float [[TMP18]], ptr [[ARRAYIDX26]], align 4
; CHECK-NEXT:    store float [[TMP17]], ptr [[ARRAYIDX24]], align 4
; CHECK-NEXT:    store float [[TMP16]], ptr [[ARRAYIDX22]], align 4
; CHECK-NEXT:    store float [[TMP15]], ptr [[ARRAYIDX20]], align 4
; CHECK-NEXT:    store float [[TMP14]], ptr [[ARRAYIDX18]], align 4
; CHECK-NEXT:    store float [[TMP13]], ptr [[ARRAYIDX16]], align 4
; CHECK-NEXT:    store float [[TMP12]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ADD89]] = add nuw nsw i32 [[N_0276]], 16
; CHECK-NEXT:    [[CMP745:%.*]] = icmp slt i32 [[ADD89]], [[SUB6]]
; CHECK-NEXT:    br i1 [[CMP745]], label [[FOR_COND8_PREHEADER]], label [[FOR_COND91_PREHEADER]]
; CHECK:       for.body14.us.unroll:
; CHECK-NEXT:    [[M_037_US_UNROLL:%.*]] = phi i32 [ 0, [[FOR_BODY10_LR_PH]] ], [ [[INC_US_UNROLL:%.*]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[K_CORR_036_US_UNROLL:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP60]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP28:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP61]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP29:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP62]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP30:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP63]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP31:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP64]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP65]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP66]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP67]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP68]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP69]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP70]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP38:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP71]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP39:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP72]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP40:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP73]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP41:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP74]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[TMP42:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY10_LR_PH]] ], [ [[TMP75]], [[FOR_BODY14_US_UNROLL]] ]
; CHECK-NEXT:    [[ARRAYIDX15_US_UNROLL:%.*]] = getelementptr inbounds float, ptr [[PATTERN]], i32 [[M_037_US_UNROLL]]
; CHECK-NEXT:    [[ARRAYIDX_US_UNROLL:%.*]] = getelementptr float, ptr [[TMP0]], i32 [[M_037_US_UNROLL]]
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 1
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 2
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 3
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 4
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 5
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 6
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 7
; CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 8
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 9
; CHECK-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 10
; CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 11
; CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 12
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 13
; CHECK-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 14
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr float, ptr [[ARRAYIDX15_US_UNROLL]], i32 15
; CHECK-NEXT:    [[TMP43:%.*]] = load float, ptr [[ARRAYIDX15_US_UNROLL]], align 4
; CHECK-NEXT:    [[TMP44:%.*]] = load float, ptr [[ARRAYIDX_US_UNROLL]], align 4
; CHECK-NEXT:    [[TMP45:%.*]] = load float, ptr [[ARRAYIDX1]], align 4
; CHECK-NEXT:    [[TMP46:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[TMP47:%.*]] = load float, ptr [[ARRAYIDX3]], align 4
; CHECK-NEXT:    [[TMP48:%.*]] = load float, ptr [[ARRAYIDX4]], align 4
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX6]], align 4
; CHECK-NEXT:    [[TMP51:%.*]] = load float, ptr [[ARRAYIDX7]], align 4
; CHECK-NEXT:    [[TMP52:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; CHECK-NEXT:    [[TMP53:%.*]] = load float, ptr [[ARRAYIDX9]], align 4
; CHECK-NEXT:    [[TMP54:%.*]] = load float, ptr [[ARRAYIDX10]], align 4
; CHECK-NEXT:    [[TMP55:%.*]] = load float, ptr [[ARRAYIDX11]], align 4
; CHECK-NEXT:    [[TMP56:%.*]] = load float, ptr [[ARRAYIDX12]], align 4
; CHECK-NEXT:    [[TMP57:%.*]] = load float, ptr [[ARRAYIDX13]], align 4
; CHECK-NEXT:    [[TMP58:%.*]] = load float, ptr [[ARRAYIDX14]], align 4
; CHECK-NEXT:    [[TMP59:%.*]] = load float, ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    [[TMP60]] = tail call float @llvm.fmuladd.f32(float [[TMP44]], float [[TMP43]], float [[K_CORR_036_US_UNROLL]])
; CHECK-NEXT:    [[TMP61]] = tail call float @llvm.fmuladd.f32(float [[TMP45]], float [[TMP43]], float [[TMP28]])
; CHECK-NEXT:    [[TMP62]] = tail call float @llvm.fmuladd.f32(float [[TMP46]], float [[TMP43]], float [[TMP29]])
; CHECK-NEXT:    [[TMP63]] = tail call float @llvm.fmuladd.f32(float [[TMP47]], float [[TMP43]], float [[TMP30]])
; CHECK-NEXT:    [[TMP64]] = tail call float @llvm.fmuladd.f32(float [[TMP48]], float [[TMP43]], float [[TMP31]])
; CHECK-NEXT:    [[TMP65]] = tail call float @llvm.fmuladd.f32(float [[TMP49]], float [[TMP43]], float [[TMP32]])
; CHECK-NEXT:    [[TMP66]] = tail call float @llvm.fmuladd.f32(float [[TMP50]], float [[TMP43]], float [[TMP33]])
; CHECK-NEXT:    [[TMP67]] = tail call float @llvm.fmuladd.f32(float [[TMP51]], float [[TMP43]], float [[TMP34]])
; CHECK-NEXT:    [[TMP68]] = tail call float @llvm.fmuladd.f32(float [[TMP52]], float [[TMP43]], float [[TMP35]])
; CHECK-NEXT:    [[TMP69]] = tail call float @llvm.fmuladd.f32(float [[TMP53]], float [[TMP43]], float [[TMP36]])
; CHECK-NEXT:    [[TMP70]] = tail call float @llvm.fmuladd.f32(float [[TMP54]], float [[TMP43]], float [[TMP37]])
; CHECK-NEXT:    [[TMP71]] = tail call float @llvm.fmuladd.f32(float [[TMP55]], float [[TMP43]], float [[TMP38]])
; CHECK-NEXT:    [[TMP72]] = tail call float @llvm.fmuladd.f32(float [[TMP56]], float [[TMP43]], float [[TMP39]])
; CHECK-NEXT:    [[TMP73]] = tail call float @llvm.fmuladd.f32(float [[TMP57]], float [[TMP43]], float [[TMP40]])
; CHECK-NEXT:    [[TMP74]] = tail call float @llvm.fmuladd.f32(float [[TMP58]], float [[TMP43]], float [[TMP41]])
; CHECK-NEXT:    [[TMP75]] = tail call float @llvm.fmuladd.f32(float [[TMP59]], float [[TMP43]], float [[TMP42]])
; CHECK-NEXT:    [[INC_US_UNROLL]] = add nuw i32 [[M_037_US_UNROLL]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_UNROLL:%.*]] = icmp eq i32 [[INC_US_UNROLL]], [[PATLEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_UNROLL]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY14_US_UNROLL]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458755, [[ENTRY:%.*]] ], [ 0, [[FOR_COND11_PREHEADER_PREHEADER]] ], [ 0, [[FOR_COND11_FOR_COND_CLEANUP13_CRIT_EDGE_US]] ], [ 0, [[FOR_COND91_PREHEADER]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %cmp = icmp eq ptr %Signal, null
  %cmp1 = icmp eq ptr %Pattern, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp4 = icmp eq ptr %dest, null
  %or.cond33 = or i1 %or.cond, %cmp4
  %cmp7 = icmp slt i32 %siglen, %patlen
  %or.cond34 = or i1 %cmp7, %or.cond33
  br i1 %or.cond34, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %sub = sub nsw i32 %siglen, %patlen
  %cmp1235.not = icmp eq i32 %patlen, 0
  br i1 %cmp1235.not, label %for.cond11.preheader.preheader, label %for.cond11.preheader.us

for.cond11.preheader.preheader:                   ; preds = %for.cond.preheader
  %0 = shl i32 %siglen, 2
  %1 = add i32 %0, 4
  tail call void @llvm.memset.p0.i32(ptr nonnull align 4 %dest, i8 0, i32 %1, i1 false)
  br label %return

for.cond11.preheader.us:                          ; preds = %for.cond11.for.cond.cleanup13_crit_edge.us, %for.cond.preheader
  %n.038.us = phi i32 [ %inc18.us, %for.cond11.for.cond.cleanup13_crit_edge.us ], [ 0, %for.cond.preheader ]
  %2 = getelementptr float, ptr %Signal, i32 %n.038.us
  br label %for.body14.us

for.body14.us:                                    ; preds = %for.body14.us, %for.cond11.preheader.us
  %m.037.us = phi i32 [ 0, %for.cond11.preheader.us ], [ %inc.us, %for.body14.us ]
  %k_corr.036.us = phi float [ 0.000000e+00, %for.cond11.preheader.us ], [ %5, %for.body14.us ]
  %arrayidx.us = getelementptr float, ptr %2, i32 %m.037.us
  %3 = load float, ptr %arrayidx.us, align 4
  %arrayidx15.us = getelementptr inbounds float, ptr %Pattern, i32 %m.037.us
  %4 = load float, ptr %arrayidx15.us, align 4
  %5 = tail call float @llvm.fmuladd.f32(float %3, float %4, float %k_corr.036.us)
  %inc.us = add nuw i32 %m.037.us, 1
  %exitcond.not = icmp eq i32 %inc.us, %patlen
  br i1 %exitcond.not, label %for.cond11.for.cond.cleanup13_crit_edge.us, label %for.body14.us

for.cond11.for.cond.cleanup13_crit_edge.us:       ; preds = %for.body14.us
  %arrayidx16.us = getelementptr inbounds float, ptr %dest, i32 %n.038.us
  store float %5, ptr %arrayidx16.us, align 4
  %inc18.us = add nuw i32 %n.038.us, 1
  %cmp10.not.us.not = icmp ult i32 %n.038.us, %sub
  br i1 %cmp10.not.us.not, label %for.cond11.preheader.us, label %return

return:                                           ; preds = %for.cond11.for.cond.cleanup13_crit_edge.us, %for.cond11.preheader.preheader, %entry
  %retval.0 = phi i32 [ 458755, %entry ], [ 0, %for.cond11.preheader.preheader ], [ 0, %for.cond11.for.cond.cleanup13_crit_edge.us ]
  ret i32 %retval.0
}
