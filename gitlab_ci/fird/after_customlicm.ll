; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
%struct.fir_f32_s = type { ptr, ptr, i32, i32, i32, i16 }
define dso_local noundef i32 @dsps_fird_f32_ansi(ptr nocapture noundef %fir, ptr nocapture noundef readonly %input, ptr nocapture noundef writeonly %output, i32 noundef %len) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_fird_f32_ansi(
; CHECK-SAME: ptr noalias nocapture noundef [[FIR:%.*]], ptr noalias nocapture noundef readonly [[INPUT:%.*]], ptr noalias nocapture noundef writeonly [[OUTPUT:%.*]], i32 noundef [[LEN:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP77:%.*]] = icmp sgt i32 [[LEN]], 0
; CHECK-NEXT:    br i1 [[CMP77]], label [[FOR_COND1_PREHEADER_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.cond1.preheader.lr.ph:
; CHECK-NEXT:    [[DECIM:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S:%.*]], ptr [[FIR]], i32 0, i32 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[DECIM]], align 4
; CHECK-NEXT:    [[CMP263:%.*]] = icmp sgt i32 [[TMP0]], 0
; CHECK-NEXT:    [[DELAY:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 1
; CHECK-NEXT:    [[POS:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 3
; CHECK-NEXT:    [[N:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 2
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[N]], align 4
; CHECK-NEXT:    [[POS9_PROMOTED:%.*]] = load i32, ptr [[POS]], align 4
; CHECK-NEXT:    br label [[FOR_COND1_PREHEADER:%.*]]
; CHECK:       for.cond1.preheader:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i32 [ [[POS9_PROMOTED]], [[FOR_COND1_PREHEADER_LR_PH]] ], [ [[TMP4:%.*]], [[FOR_END141:%.*]] ]
; CHECK-NEXT:    [[I_080:%.*]] = phi i32 [ 0, [[FOR_COND1_PREHEADER_LR_PH]] ], [ [[INC152:%.*]], [[FOR_END141]] ]
; CHECK-NEXT:    [[INPUT_ADDR_078:%.*]] = phi ptr [ [[INPUT]], [[FOR_COND1_PREHEADER_LR_PH]] ], [ [[INPUT_ADDR_1_LCSSA:%.*]], [[FOR_END141]] ]
; CHECK-NEXT:    br i1 [[CMP263]], label [[FOR_BODY4_LR_PH:%.*]], label [[FOR_COND_CLEANUP3:%.*]]
; CHECK:       for.body4.lr.ph:
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    br label [[FOR_BODY4:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    [[RESULT_0_LCSSA:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[LEN]], [[FOR_END141]] ]
; CHECK-NEXT:    ret i32 [[RESULT_0_LCSSA]]
; CHECK:       for.cond1.for.cond.cleanup3_crit_edge:
; CHECK-NEXT:    store i32 [[SPEC_SELECT:%.*]], ptr [[POS]], align 4
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP3]]
; CHECK:       for.cond.cleanup3:
; CHECK-NEXT:    [[TMP4]] = phi i32 [ [[SPEC_SELECT]], [[FOR_COND1_FOR_COND_CLEANUP3_CRIT_EDGE:%.*]] ], [ [[TMP2]], [[FOR_COND1_PREHEADER]] ]
; CHECK-NEXT:    [[INPUT_ADDR_1_LCSSA]] = phi ptr [ [[INCDEC_PTR:%.*]], [[FOR_COND1_FOR_COND_CLEANUP3_CRIT_EDGE]] ], [ [[INPUT_ADDR_078]], [[FOR_COND1_PREHEADER]] ]
; CHECK-NEXT:    [[ADD269:%.*]] = add nsw i32 [[TMP4]], 8
; CHECK-NEXT:    [[CMP1266:%.*]] = icmp sgt i32 [[ADD269]], [[TMP1]]
; CHECK-NEXT:    br i1 [[CMP1266]], label [[FOR_COND63_PREHEADER:%.*]], label [[FOR_BODY14_LR_PH:%.*]]
; CHECK:       for.body14.lr.ph:
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    br label [[FOR_BODY14_7:%.*]]
; CHECK:       for.body4:
; CHECK-NEXT:    [[TMP7:%.*]] = phi i32 [ [[TMP2]], [[FOR_BODY4_LR_PH]] ], [ [[SPEC_SELECT]], [[FOR_BODY4]] ]
; CHECK-NEXT:    [[K_065:%.*]] = phi i32 [ 0, [[FOR_BODY4_LR_PH]] ], [ [[INC8:%.*]], [[FOR_BODY4]] ]
; CHECK-NEXT:    [[INPUT_ADDR_164:%.*]] = phi ptr [ [[INPUT_ADDR_078]], [[FOR_BODY4_LR_PH]] ], [ [[INCDEC_PTR]], [[FOR_BODY4]] ]
; CHECK-NEXT:    [[INCDEC_PTR]] = getelementptr inbounds float, ptr [[INPUT_ADDR_164]], i32 1
; CHECK-NEXT:    [[TMP8:%.*]] = load float, ptr [[INPUT_ADDR_164]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP7]], 1
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 [[TMP7]]
; CHECK-NEXT:    store float [[TMP8]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[CMP6_NOT:%.*]] = icmp slt i32 [[INC]], [[TMP1]]
; CHECK-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP6_NOT]], i32 [[INC]], i32 0
; CHECK-NEXT:    [[INC8]] = add nuw nsw i32 [[K_065]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC8]], [[TMP0]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND1_FOR_COND_CLEANUP3_CRIT_EDGE]], label [[FOR_BODY4]]
; CHECK:       for.cond63.preheader:
; CHECK-NEXT:    [[ACC_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP14:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_1_LCSSA2:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP17:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_2_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP20:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_3_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP23:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_4_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP26:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_5_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP29:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_6_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP32:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_7_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP35:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[COEFF_POS_0_LCSSA:%.*]] = phi i32 [ 0, [[FOR_COND_CLEANUP3]] ], [ [[INC15_7:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[N_0_LCSSA:%.*]] = phi i32 [ [[TMP4]], [[FOR_COND_CLEANUP3]] ], [ [[ADD281:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[CMP2572:%.*]] = icmp slt i32 [[N_0_LCSSA]], [[TMP1]]
; CHECK-NEXT:    br i1 [[CMP2572]], label [[FOR_BODY27_LR_PH:%.*]], label [[FOR_COND_CLEANUP26:%.*]]
; CHECK:       for.body27.lr.ph:
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP1]], [[COEFF_POS_0_LCSSA]]
; CHECK-NEXT:    br label [[FOR_BODY14_CLONE:%.*]]
; CHECK:       for.body14.7:
; CHECK-NEXT:    [[ADD281]] = phi i32 [ [[ADD269]], [[FOR_BODY14_LR_PH]] ], [ [[INC20_7:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[N_069:%.*]] = phi i32 [ [[TMP4]], [[FOR_BODY14_LR_PH]] ], [ [[ADD281]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[COEFF_POS_068:%.*]] = phi i32 [ 0, [[FOR_BODY14_LR_PH]] ], [ [[INC15_7]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP14]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC3:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP17]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC4:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP20]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC5:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP23]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC6:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP26]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC7:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP29]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC8:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP32]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC9:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP35]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ADD:%.*]] = or disjoint i32 [[COEFF_POS_068]], 1
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[COEFF_POS_068]]
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[ARRAYIDX16]], align 4
; CHECK-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i32 [[N_069]]
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[ARRAYIDX18]], align 4
; CHECK-NEXT:    [[TMP14]] = tail call float @llvm.fmuladd.f32(float [[TMP12]], float [[TMP13]], float [[ACC]])
; CHECK-NEXT:    [[ADD11:%.*]] = or disjoint i32 [[COEFF_POS_068]], 2
; CHECK-NEXT:    [[ARRAYIDX16_1:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[ADD]]
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[ARRAYIDX16_1]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_1:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX18]], i32 1
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[ARRAYIDX18_1]], align 4
; CHECK-NEXT:    [[TMP17]] = tail call float @llvm.fmuladd.f32(float [[TMP15]], float [[TMP16]], float [[ACC3]])
; CHECK-NEXT:    [[ADD13:%.*]] = or disjoint i32 [[COEFF_POS_068]], 3
; CHECK-NEXT:    [[ARRAYIDX16_2:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[ADD11]]
; CHECK-NEXT:    [[TMP18:%.*]] = load float, ptr [[ARRAYIDX16_2]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_2:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX18]], i32 2
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[ARRAYIDX18_2]], align 4
; CHECK-NEXT:    [[TMP20]] = tail call float @llvm.fmuladd.f32(float [[TMP18]], float [[TMP19]], float [[ACC4]])
; CHECK-NEXT:    [[ADD15:%.*]] = or disjoint i32 [[COEFF_POS_068]], 4
; CHECK-NEXT:    [[ARRAYIDX16_3:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[ADD13]]
; CHECK-NEXT:    [[TMP21:%.*]] = load float, ptr [[ARRAYIDX16_3]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_3:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX18]], i32 3
; CHECK-NEXT:    [[TMP22:%.*]] = load float, ptr [[ARRAYIDX18_3]], align 4
; CHECK-NEXT:    [[TMP23]] = tail call float @llvm.fmuladd.f32(float [[TMP21]], float [[TMP22]], float [[ACC5]])
; CHECK-NEXT:    [[ADD17:%.*]] = or disjoint i32 [[COEFF_POS_068]], 5
; CHECK-NEXT:    [[ARRAYIDX16_4:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[ADD15]]
; CHECK-NEXT:    [[TMP24:%.*]] = load float, ptr [[ARRAYIDX16_4]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_4:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX18]], i32 4
; CHECK-NEXT:    [[TMP25:%.*]] = load float, ptr [[ARRAYIDX18_4]], align 4
; CHECK-NEXT:    [[TMP26]] = tail call float @llvm.fmuladd.f32(float [[TMP24]], float [[TMP25]], float [[ACC6]])
; CHECK-NEXT:    [[ADD19:%.*]] = or disjoint i32 [[COEFF_POS_068]], 6
; CHECK-NEXT:    [[ARRAYIDX16_5:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[ADD17]]
; CHECK-NEXT:    [[TMP27:%.*]] = load float, ptr [[ARRAYIDX16_5]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_5:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX18]], i32 5
; CHECK-NEXT:    [[TMP28:%.*]] = load float, ptr [[ARRAYIDX18_5]], align 4
; CHECK-NEXT:    [[TMP29]] = tail call float @llvm.fmuladd.f32(float [[TMP27]], float [[TMP28]], float [[ACC7]])
; CHECK-NEXT:    [[INC15_6:%.*]] = add nuw nsw i32 [[COEFF_POS_068]], 7
; CHECK-NEXT:    [[ARRAYIDX16_6:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[ADD19]]
; CHECK-NEXT:    [[TMP30:%.*]] = load float, ptr [[ARRAYIDX16_6]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_6:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX18]], i32 6
; CHECK-NEXT:    [[TMP31:%.*]] = load float, ptr [[ARRAYIDX18_6]], align 4
; CHECK-NEXT:    [[TMP32]] = tail call float @llvm.fmuladd.f32(float [[TMP30]], float [[TMP31]], float [[ACC8]])
; CHECK-NEXT:    [[INC15_7]] = add nuw i32 [[COEFF_POS_068]], 8
; CHECK-NEXT:    [[ARRAYIDX16_7:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[INC15_6]]
; CHECK-NEXT:    [[TMP33:%.*]] = load float, ptr [[ARRAYIDX16_7]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_7:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX18]], i32 7
; CHECK-NEXT:    [[TMP34:%.*]] = load float, ptr [[ARRAYIDX18_7]], align 4
; CHECK-NEXT:    [[TMP35]] = tail call float @llvm.fmuladd.f32(float [[TMP33]], float [[TMP34]], float [[ACC9]])
; CHECK-NEXT:    [[INC20_7]] = add nsw i32 [[ADD281]], 8
; CHECK-NEXT:    [[EXITCOND83_NOT_7:%.*]] = icmp sgt i32 [[INC20_7]], [[TMP1]]
; CHECK-NEXT:    br i1 [[EXITCOND83_NOT_7]], label [[FOR_COND63_PREHEADER]], label [[FOR_BODY14_7]]
; CHECK:       for.body79.lr.ph:
; CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP37:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[TMP38:%.*]] = and i32 [[TMP4]], 2147483640
; CHECK-NEXT:    br label [[FOR_BODY27_7:%.*]]
; CHECK:       for.body14.clone:
; CHECK-NEXT:    [[N_069_CLONE:%.*]] = phi i32 [ [[N_0_LCSSA]], [[FOR_BODY27_LR_PH]] ], [ [[INC20_CLONE:%.*]], [[FOR_BODY14_CLONE]] ]
; CHECK-NEXT:    [[COEFF_POS_068_CLONE:%.*]] = phi i32 [ [[COEFF_POS_0_LCSSA]], [[FOR_BODY27_LR_PH]] ], [ [[INC15_CLONE:%.*]], [[FOR_BODY14_CLONE]] ]
; CHECK-NEXT:    [[ACC_067_CLONE:%.*]] = phi float [ [[ACC_0_LCSSA]], [[FOR_BODY27_LR_PH]] ], [ [[TMP41:%.*]], [[FOR_BODY14_CLONE]] ]
; CHECK-NEXT:    [[INC15_CLONE]] = add nuw nsw i32 [[COEFF_POS_068_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX16_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP9]], i32 [[COEFF_POS_068_CLONE]]
; CHECK-NEXT:    [[TMP39:%.*]] = load float, ptr [[ARRAYIDX16_CLONE]], align 4
; CHECK-NEXT:    [[ARRAYIDX18_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP10]], i32 [[N_069_CLONE]]
; CHECK-NEXT:    [[TMP40:%.*]] = load float, ptr [[ARRAYIDX18_CLONE]], align 4
; CHECK-NEXT:    [[TMP41]] = tail call float @llvm.fmuladd.f32(float [[TMP39]], float [[TMP40]], float [[ACC_067_CLONE]])
; CHECK-NEXT:    [[INC20_CLONE]] = add nsw i32 [[N_069_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND83_NOT_CLONE:%.*]] = icmp eq i32 [[INC20_CLONE]], [[TMP1]]
; CHECK-NEXT:    br i1 [[EXITCOND83_NOT_CLONE]], label [[FOR_COND_CLEANUP26_LOOPEXIT:%.*]], label [[FOR_BODY14_CLONE]]
; CHECK:       for.cond130.preheader:
; CHECK-NEXT:    [[ACC_0_LCSSA_CLONE:%.*]] = phi float [ [[ACC_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ], [ [[TMP45:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_1_LCSSA2_CLONE:%.*]] = phi float [ [[ACC_1_LCSSA2]], [[FOR_COND_CLEANUP26]] ], [ [[TMP48:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_2_LCSSA_CLONE:%.*]] = phi float [ [[ACC_2_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP51:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_3_LCSSA_CLONE:%.*]] = phi float [ [[ACC_3_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP54:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_4_LCSSA_CLONE:%.*]] = phi float [ [[ACC_4_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP57:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_5_LCSSA_CLONE:%.*]] = phi float [ [[ACC_5_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP60:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_6_LCSSA_CLONE:%.*]] = phi float [ [[ACC_6_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP63:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_7_LCSSA_CLONE:%.*]] = phi float [ [[ACC_7_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP66:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[COEFF_POS_0_LCSSA_CLONE:%.*]] = phi i32 [ [[COEFF_POS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ], [ [[ADD57:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[N_0_LCSSA_CLONE:%.*]] = phi i32 [ 0, [[FOR_COND_CLEANUP26]] ], [ [[TMP38]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[CMP2572_CLONE:%.*]] = icmp slt i32 [[N_0_LCSSA_CLONE]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP2572_CLONE]], label [[FOR_BODY133_LR_PH:%.*]], label [[FOR_END141]]
; CHECK:       for.cond.cleanup26.loopexit:
; CHECK-NEXT:    [[TMP42:%.*]] = sub i32 [[TMP11]], [[N_0_LCSSA]]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP26]]
; CHECK:       for.cond.cleanup26:
; CHECK-NEXT:    [[COEFF_POS_1_LCSSA]] = phi i32 [ [[COEFF_POS_0_LCSSA]], [[FOR_COND63_PREHEADER]] ], [ [[TMP42]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[ACC_1_LCSSA]] = phi float [ [[ACC_0_LCSSA]], [[FOR_COND63_PREHEADER]] ], [ [[TMP41]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[EXITCOND85_NOT:%.*]] = icmp slt i32 [[TMP4]], 8
; CHECK-NEXT:    br i1 [[EXITCOND85_NOT]], label [[FOR_COND130_PREHEADER:%.*]], label [[FOR_BODY79_LR_PH:%.*]]
; CHECK:       for.body27.7:
; CHECK-NEXT:    [[ADD76310:%.*]] = phi i32 [ 8, [[FOR_BODY79_LR_PH]] ], [ [[ADD76:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[N22_075:%.*]] = phi i32 [ 0, [[FOR_BODY79_LR_PH]] ], [ [[ADD76310]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[COEFF_POS_174:%.*]] = phi i32 [ [[COEFF_POS_1_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[ADD57]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC20:%.*]] = phi float [ [[ACC_1_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP45]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC21:%.*]] = phi float [ [[ACC_1_LCSSA2]], [[FOR_BODY79_LR_PH]] ], [ [[TMP48]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC22:%.*]] = phi float [ [[ACC_2_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP51]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC23:%.*]] = phi float [ [[ACC_3_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP54]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC24:%.*]] = phi float [ [[ACC_4_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP57]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC25:%.*]] = phi float [ [[ACC_5_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP60]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC26:%.*]] = phi float [ [[ACC_6_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP63]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC27:%.*]] = phi float [ [[ACC_7_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP66]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ARRAYIDX30:%.*]] = getelementptr inbounds float, ptr [[TMP36]], i32 [[COEFF_POS_174]]
; CHECK-NEXT:    [[TMP43:%.*]] = load float, ptr [[ARRAYIDX30]], align 4
; CHECK-NEXT:    [[ARRAYIDX32:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[N22_075]]
; CHECK-NEXT:    [[TMP44:%.*]] = load float, ptr [[ARRAYIDX32]], align 4
; CHECK-NEXT:    [[TMP45]] = tail call float @llvm.fmuladd.f32(float [[TMP43]], float [[TMP44]], float [[ACC20]])
; CHECK-NEXT:    [[ADD31:%.*]] = or disjoint i32 [[N22_075]], 1
; CHECK-NEXT:    [[ARRAYIDX30_1:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX30]], i32 1
; CHECK-NEXT:    [[TMP46:%.*]] = load float, ptr [[ARRAYIDX30_1]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_1:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[ADD31]]
; CHECK-NEXT:    [[TMP47:%.*]] = load float, ptr [[ARRAYIDX32_1]], align 4
; CHECK-NEXT:    [[TMP48]] = tail call float @llvm.fmuladd.f32(float [[TMP46]], float [[TMP47]], float [[ACC21]])
; CHECK-NEXT:    [[ADD35:%.*]] = or disjoint i32 [[N22_075]], 2
; CHECK-NEXT:    [[ARRAYIDX30_2:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX30]], i32 2
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX30_2]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_2:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[ADD35]]
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX32_2]], align 4
; CHECK-NEXT:    [[TMP51]] = tail call float @llvm.fmuladd.f32(float [[TMP49]], float [[TMP50]], float [[ACC22]])
; CHECK-NEXT:    [[ADD39:%.*]] = or disjoint i32 [[N22_075]], 3
; CHECK-NEXT:    [[ARRAYIDX30_3:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX30]], i32 3
; CHECK-NEXT:    [[TMP52:%.*]] = load float, ptr [[ARRAYIDX30_3]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_3:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[ADD39]]
; CHECK-NEXT:    [[TMP53:%.*]] = load float, ptr [[ARRAYIDX32_3]], align 4
; CHECK-NEXT:    [[TMP54]] = tail call float @llvm.fmuladd.f32(float [[TMP52]], float [[TMP53]], float [[ACC23]])
; CHECK-NEXT:    [[ADD43:%.*]] = or disjoint i32 [[N22_075]], 4
; CHECK-NEXT:    [[ARRAYIDX30_4:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX30]], i32 4
; CHECK-NEXT:    [[TMP55:%.*]] = load float, ptr [[ARRAYIDX30_4]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_4:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[ADD43]]
; CHECK-NEXT:    [[TMP56:%.*]] = load float, ptr [[ARRAYIDX32_4]], align 4
; CHECK-NEXT:    [[TMP57]] = tail call float @llvm.fmuladd.f32(float [[TMP55]], float [[TMP56]], float [[ACC24]])
; CHECK-NEXT:    [[ADD47:%.*]] = or disjoint i32 [[N22_075]], 5
; CHECK-NEXT:    [[ARRAYIDX30_5:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX30]], i32 5
; CHECK-NEXT:    [[TMP58:%.*]] = load float, ptr [[ARRAYIDX30_5]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_5:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[ADD47]]
; CHECK-NEXT:    [[TMP59:%.*]] = load float, ptr [[ARRAYIDX32_5]], align 4
; CHECK-NEXT:    [[TMP60]] = tail call float @llvm.fmuladd.f32(float [[TMP58]], float [[TMP59]], float [[ACC25]])
; CHECK-NEXT:    [[ADD51:%.*]] = or disjoint i32 [[N22_075]], 6
; CHECK-NEXT:    [[ARRAYIDX30_6:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX30]], i32 6
; CHECK-NEXT:    [[TMP61:%.*]] = load float, ptr [[ARRAYIDX30_6]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_6:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[ADD51]]
; CHECK-NEXT:    [[TMP62:%.*]] = load float, ptr [[ARRAYIDX32_6]], align 4
; CHECK-NEXT:    [[TMP63]] = tail call float @llvm.fmuladd.f32(float [[TMP61]], float [[TMP62]], float [[ACC26]])
; CHECK-NEXT:    [[ADD55:%.*]] = or disjoint i32 [[N22_075]], 7
; CHECK-NEXT:    [[ADD57]] = or disjoint i32 [[COEFF_POS_174]], 8
; CHECK-NEXT:    [[ARRAYIDX30_7:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX30]], i32 7
; CHECK-NEXT:    [[TMP64:%.*]] = load float, ptr [[ARRAYIDX30_7]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_7:%.*]] = getelementptr inbounds float, ptr [[TMP37]], i32 [[ADD55]]
; CHECK-NEXT:    [[TMP65:%.*]] = load float, ptr [[ARRAYIDX32_7]], align 4
; CHECK-NEXT:    [[TMP66]] = tail call float @llvm.fmuladd.f32(float [[TMP64]], float [[TMP65]], float [[ACC27]])
; CHECK-NEXT:    [[ADD76]] = add nuw nsw i32 [[ADD76310]], 8
; CHECK-NEXT:    [[EXITCOND84_NOT_7:%.*]] = icmp sgt i32 [[ADD76]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND84_NOT_7]], label [[FOR_COND130_PREHEADER]], label [[FOR_BODY27_7]]
; CHECK:       for.body133.lr.ph:
; CHECK-NEXT:    [[TMP67:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP68:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    br label [[FOR_BODY27_CLONE:%.*]]
; CHECK:       for.body27.clone:
; CHECK-NEXT:    [[N22_075_CLONE:%.*]] = phi i32 [ [[N_0_LCSSA_CLONE]], [[FOR_BODY133_LR_PH]] ], [ [[INC34_CLONE:%.*]], [[FOR_BODY27_CLONE]] ]
; CHECK-NEXT:    [[COEFF_POS_174_CLONE:%.*]] = phi i32 [ [[COEFF_POS_0_LCSSA_CLONE]], [[FOR_BODY133_LR_PH]] ], [ [[INC29_CLONE:%.*]], [[FOR_BODY27_CLONE]] ]
; CHECK-NEXT:    [[ACC_173_CLONE:%.*]] = phi float [ [[ACC_0_LCSSA_CLONE]], [[FOR_BODY133_LR_PH]] ], [ [[TMP71:%.*]], [[FOR_BODY27_CLONE]] ]
; CHECK-NEXT:    [[INC29_CLONE]] = add nuw nsw i32 [[COEFF_POS_174_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX30_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP67]], i32 [[COEFF_POS_174_CLONE]]
; CHECK-NEXT:    [[TMP69:%.*]] = load float, ptr [[ARRAYIDX30_CLONE]], align 4
; CHECK-NEXT:    [[ARRAYIDX32_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP68]], i32 [[N22_075_CLONE]]
; CHECK-NEXT:    [[TMP70:%.*]] = load float, ptr [[ARRAYIDX32_CLONE]], align 4
; CHECK-NEXT:    [[TMP71]] = tail call float @llvm.fmuladd.f32(float [[TMP69]], float [[TMP70]], float [[ACC_173_CLONE]])
; CHECK-NEXT:    [[INC34_CLONE]] = add nuw nsw i32 [[N22_075_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND84_NOT_CLONE:%.*]] = icmp eq i32 [[INC34_CLONE]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND84_NOT_CLONE]], label [[FOR_END141]], label [[FOR_BODY27_CLONE]]
; CHECK:       for.end141:
; CHECK-NEXT:    [[ACC0_3_LCSSA:%.*]] = phi float [ [[ACC_0_LCSSA_CLONE]], [[FOR_COND130_PREHEADER]] ], [ [[TMP71]], [[FOR_BODY27_CLONE]] ]
; CHECK-NEXT:    [[ADD60:%.*]] = fadd float [[ACC_1_LCSSA2_CLONE]], [[ACC0_3_LCSSA]]
; CHECK-NEXT:    [[ADD61:%.*]] = fadd float [[ACC_2_LCSSA_CLONE]], [[ADD60]]
; CHECK-NEXT:    [[ADD62:%.*]] = fadd float [[ACC_3_LCSSA_CLONE]], [[ADD61]]
; CHECK-NEXT:    [[ADD63:%.*]] = fadd float [[ACC_4_LCSSA_CLONE]], [[ADD62]]
; CHECK-NEXT:    [[ADD64:%.*]] = fadd float [[ACC_5_LCSSA_CLONE]], [[ADD63]]
; CHECK-NEXT:    [[ADD65:%.*]] = fadd float [[ACC_6_LCSSA_CLONE]], [[ADD64]]
; CHECK-NEXT:    [[ADD66:%.*]] = fadd float [[ACC_7_LCSSA_CLONE]], [[ADD65]]
; CHECK-NEXT:    [[ARRAYIDX37:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[I_080]]
; CHECK-NEXT:    store float [[ADD66]], ptr [[ARRAYIDX37]], align 4
; CHECK-NEXT:    [[INC152]] = add nuw nsw i32 [[I_080]], 1
; CHECK-NEXT:    [[EXITCOND350_NOT:%.*]] = icmp eq i32 [[INC152]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND350_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_COND1_PREHEADER]]
;
entry:
  %cmp77 = icmp sgt i32 %len, 0
  br i1 %cmp77, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %decim = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 4
  %0 = load i32, ptr %decim, align 4
  %cmp263 = icmp sgt i32 %0, 0
  %delay = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 1
  %pos = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 3
  %N = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 2
  %1 = load i32, ptr %N, align 4
  %pos9.promoted = load i32, ptr %pos, align 4
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup26, %for.cond1.preheader.lr.ph
  %2 = phi i32 [ %pos9.promoted, %for.cond1.preheader.lr.ph ], [ %4, %for.cond.cleanup26 ]
  %i.080 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc39, %for.cond.cleanup26 ]
  %input.addr.078 = phi ptr [ %input, %for.cond1.preheader.lr.ph ], [ %input.addr.1.lcssa, %for.cond.cleanup26 ]
  br i1 %cmp263, label %for.body4.lr.ph, label %for.cond.cleanup3

for.body4.lr.ph:                                  ; preds = %for.cond1.preheader
  %3 = load ptr, ptr %delay, align 4
  br label %for.body4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup26, %entry
  %result.0.lcssa = phi i32 [ 0, %entry ], [ %len, %for.cond.cleanup26 ]
  ret i32 %result.0.lcssa

for.cond1.for.cond.cleanup3_crit_edge:            ; preds = %for.body4
  store i32 %spec.select, ptr %pos, align 4
  br label %for.cond.cleanup3

for.cond.cleanup3:                                ; preds = %for.cond1.for.cond.cleanup3_crit_edge, %for.cond1.preheader
  %4 = phi i32 [ %spec.select, %for.cond1.for.cond.cleanup3_crit_edge ], [ %2, %for.cond1.preheader ]
  %input.addr.1.lcssa = phi ptr [ %incdec.ptr, %for.cond1.for.cond.cleanup3_crit_edge ], [ %input.addr.078, %for.cond1.preheader ]
  %cmp1266 = icmp slt i32 %4, %1
  br i1 %cmp1266, label %for.body14.lr.ph, label %for.cond23.preheader

for.body14.lr.ph:                                 ; preds = %for.cond.cleanup3
  %5 = load ptr, ptr %fir, align 4
  %6 = load ptr, ptr %delay, align 4
  %7 = sub i32 %1, %4
  br label %for.body14

for.body4:                                        ; preds = %for.body4, %for.body4.lr.ph
  %8 = phi i32 [ %2, %for.body4.lr.ph ], [ %spec.select, %for.body4 ]
  %k.065 = phi i32 [ 0, %for.body4.lr.ph ], [ %inc8, %for.body4 ]
  %input.addr.164 = phi ptr [ %input.addr.078, %for.body4.lr.ph ], [ %incdec.ptr, %for.body4 ]
  %incdec.ptr = getelementptr inbounds float, ptr %input.addr.164, i32 1
  %9 = load float, ptr %input.addr.164, align 4
  %inc = add nsw i32 %8, 1
  %arrayidx = getelementptr inbounds float, ptr %3, i32 %8
  store float %9, ptr %arrayidx, align 4
  %cmp6.not = icmp slt i32 %inc, %1
  %spec.select = select i1 %cmp6.not, i32 %inc, i32 0
  %inc8 = add nuw nsw i32 %k.065, 1
  %exitcond.not = icmp eq i32 %inc8, %0
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge, label %for.body4

for.cond23.preheader:                             ; preds = %for.body14, %for.cond.cleanup3
  %acc.0.lcssa = phi float [ 0.000000e+00, %for.cond.cleanup3 ], [ %14, %for.body14 ]
  %coeff_pos.0.lcssa = phi i32 [ 0, %for.cond.cleanup3 ], [ %7, %for.body14 ]
  %cmp2572 = icmp sgt i32 %4, 0
  br i1 %cmp2572, label %for.body27.lr.ph, label %for.cond.cleanup26

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %10 = load ptr, ptr %fir, align 4
  %11 = load ptr, ptr %delay, align 4
  br label %for.body27

for.body14:                                       ; preds = %for.body14, %for.body14.lr.ph
  %n.069 = phi i32 [ %4, %for.body14.lr.ph ], [ %inc20, %for.body14 ]
  %coeff_pos.068 = phi i32 [ 0, %for.body14.lr.ph ], [ %inc15, %for.body14 ]
  %acc.067 = phi float [ 0.000000e+00, %for.body14.lr.ph ], [ %14, %for.body14 ]
  %inc15 = add nuw i32 %coeff_pos.068, 1
  %arrayidx16 = getelementptr inbounds float, ptr %5, i32 %coeff_pos.068
  %12 = load float, ptr %arrayidx16, align 4
  %arrayidx18 = getelementptr inbounds float, ptr %6, i32 %n.069
  %13 = load float, ptr %arrayidx18, align 4
  %14 = tail call float @llvm.fmuladd.f32(float %12, float %13, float %acc.067)
  %inc20 = add nsw i32 %n.069, 1
  %exitcond83.not = icmp eq i32 %inc15, %7
  br i1 %exitcond83.not, label %for.cond23.preheader, label %for.body14

for.cond.cleanup26:                               ; preds = %for.body27, %for.cond23.preheader
  %acc.1.lcssa = phi float [ %acc.0.lcssa, %for.cond23.preheader ], [ %17, %for.body27 ]
  %inc39 = add nuw nsw i32 %i.080, 1
  %arrayidx37 = getelementptr inbounds float, ptr %output, i32 %i.080
  store float %acc.1.lcssa, ptr %arrayidx37, align 4
  %exitcond85.not = icmp eq i32 %inc39, %len
  br i1 %exitcond85.not, label %for.cond.cleanup, label %for.cond1.preheader

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %n22.075 = phi i32 [ 0, %for.body27.lr.ph ], [ %inc34, %for.body27 ]
  %coeff_pos.174 = phi i32 [ %coeff_pos.0.lcssa, %for.body27.lr.ph ], [ %inc29, %for.body27 ]
  %acc.173 = phi float [ %acc.0.lcssa, %for.body27.lr.ph ], [ %17, %for.body27 ]
  %inc29 = add nuw nsw i32 %coeff_pos.174, 1
  %arrayidx30 = getelementptr inbounds float, ptr %10, i32 %coeff_pos.174
  %15 = load float, ptr %arrayidx30, align 4
  %arrayidx32 = getelementptr inbounds float, ptr %11, i32 %n22.075
  %16 = load float, ptr %arrayidx32, align 4
  %17 = tail call float @llvm.fmuladd.f32(float %15, float %16, float %acc.173)
  %inc34 = add nuw nsw i32 %n22.075, 1
  %exitcond84.not = icmp eq i32 %inc34, %4
  br i1 %exitcond84.not, label %for.cond.cleanup26, label %for.body27
}
